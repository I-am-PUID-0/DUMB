{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Debrid Unlimited Media Bridge","text":"DUMB - A Unified Media Solution <p> DUMB is an all-in-one media management and streaming solution that integrates                  Plex Media Server, Riven, Plex Debrid, CLI Debrid, Decypharr, Zurg, Zilean, rclone, PostgreSQL, pgAdmin 4, and others into a single Docker image                  for streamlined deployment. It automates the process of                  finding, downloading, and organizing media content using                  Debrid Services, Plex Discover Watchlists, Trakt lists, Overseerr, and more,                  making content instantly available for streaming.             </p> \ud83d\ude80 So, what does all this do? <p>The DUMB ecosystem is built on multiple underlying projects that work together to enable Plex streaming using Debrid Services. These include:</p> <ul> <li>\ud83d\udd39 Plex Media Server</li> <li>\ud83d\udd39 Riven</li> <li>\ud83d\udd39 Plex Debrid</li> <li>\ud83d\udd39 CLI Debrid</li> <li>\ud83d\udd39 Decypharr</li> <li>\ud83d\udd39 Zurg</li> <li>\ud83d\udd39 Zilean</li> <li>\ud83d\udd39 rclone</li> <li>\ud83d\udd39 PostgreSQL</li> <li>\ud83d\udd39 pgAdmin 4</li> </ul> <p>These projects work seamlessly with Plex Discover Watchlists, Trakt lists, Overseerr, and more to streamline media discovery and access.</p> \ud83d\udee0\ufe0f So, what does DUMB do? <ul> <li> Unified Deployment \u2013 DUMB integrates Plex Media Server, Riven, Plex Debrid, CLI Debrid, Decypharr, Zurg, Zilean, rclone, PostgreSQL, and pgAdmin 4 into a single Docker image for faster and simplified deployment.</li> <li> Automated Configuration \u2013 DUMB eliminates the need for manual setup, ensuring a smooth and efficient media management experience.</li> <li> Web-Based UI \u2013 Take full control with an intuitive web interface, making it easy to manage downloads, track content, and interact with the various services.</li> </ul> <p>\ud83d\udccc For additional information, explore the other sections of the docs.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#-about-dumb-debrid-unlimited-media-bridge","title":"\ud83d\udce6 About DUMB (Debrid Unlimited Media Bridge)","text":"<p>Debrid Unlimited Media Bridge (DUMB) is an all-in-one, containerized platform for managing and automating media workflows using premium debrid services like Real-Debrid. Whether you're looking to automate downloads, organize libraries, mount remote content, or just reduce manual steps \u2014 DUMB aims to unify it all into a seamless experience.</p>"},{"location":"about/#-mission","title":"\ud83c\udfaf Mission","text":"<p>DUMB was created with a single goal:</p> <p>Bridge the gap between cloud-based debrid services and traditional media server ecosystems like Plex, Jellyfin, and Emby \u2014 with maximum automation and minimal configuration.</p> <p>By directly integrating the media server itself (e.g. Plex) within the DUMB container, the platform overcomes long-standing issues like broken bind mount propagation, sync delays, and external scan conflicts common in multi-container setups.</p>"},{"location":"about/#-what-makes-dumb-unique","title":"\ud83e\udde9 What Makes DUMB Unique?","text":"<p>Unlike other solutions that focus on one piece of the puzzle, DUMB integrates every step of the media pipeline:</p> <ul> <li>\ud83d\udda5\ufe0f Embedded Media Servers \u2014 Plex (and in future: Jellyfin, Emby) run inside the same container, ensuring seamless access to mounted content and full internal control</li> <li>\ud83d\udd0c Service Coordination \u2014 via the internal DUMB API and real-time config management</li> <li>\ud83d\udce5 Automated Acquisition \u2014 with core services for discovery and Zurg and/or rclone for debrid content fetching</li> <li>\u2601\ufe0f Cloud Storage Mounting \u2014 through rclone mounts direct to debrid (e.g., Real-Debrid WebDAV) or utilizing Zurg's WebDAV</li> <li>\ud83d\udd01 Library Management \u2014 using symlinks, metadata enrichment, and optional server updates</li> <li>\ud83d\udcca Metadata Caching \u2014 with Zilean to reduce latency and boost scraping efficiency</li> <li>\ud83e\udde0 Visual Control \u2014 via the DUMB Frontend for live logs, settings, and monitoring</li> </ul> <p>All services are configured through a centralized file (<code>dumb_config.json</code>) and can be dynamically updated at runtime via the DUMB Frontend.</p>"},{"location":"about/#-architecture-at-a-glance","title":"\ud83d\udee0\ufe0f Architecture at a Glance","text":"<p>DUMB is built using a modular, microservices architecture, with the following components:</p> Service Description DUMB API Core controller and coordination hub DUMB Frontend Graphical interface for managing services, configs, and logs Plex Media Server First-class embedded media server for direct playback of collected content Riven Content search, acquisition, and integration with platforms like Plex, Trakt, Overseerr, etc CLI Debrid Content search, acquisition, and integration with platforms like Plex, Trakt, Overseerr, etc Decypharr Content search, acquisition, and integration with platforms like Plex, Trakt, Overseerr, etc Zurg Handles Real-Debrid content interaction, file repair, and directory structuring rclone Mounts cloud storage into the local container for access by your media server Zilean Caches metadata and file hash lookups for performance PostgreSQL / pgAdmin Internal databases and optional management UI <p>You can explore how these services connect in the Services Overview page.</p>"},{"location":"about/#-community-driven-development","title":"\ud83d\udc65 Community-Driven Development","text":"<p>DUMB is fully open-source and community-powered. While development is led by a single maintainer, contributions of all kinds are welcome \u2014 not just code!</p> <p>You can help by:</p> <ul> <li>\u2b50 Starring the GitHub repo</li> <li>\ud83d\udcac Boosting or participating in the Discord community</li> <li>\ud83d\udee0\ufe0f Submitting feedback, bug reports, or pull requests</li> <li>\ud83e\udde0 Helping others with questions or documentation improvements</li> <li>\ud83d\udcb5 Sponsoring the Dev through GitHub Sponsors</li> </ul> <p>See the Contributing Guide for more details.</p>"},{"location":"about/#-learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li>\ud83d\udd27 Getting Started</li> <li>\ud83d\ude80 Deployment Options</li> <li>\ud83e\udde9 Service Configuration</li> <li>\ud83e\udd16 Features</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#143-2025-07-28","title":"1.4.3 (2025-07-28)","text":""},{"location":"changelog/#-bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>docs: update service documentation URLs to reflect new structure (3ef7915)</li> </ul>"},{"location":"changelog/#-refactors","title":"\ud83d\udee0\ufe0f Refactors","text":"<ul> <li>process: refactor service start/stop/restart (22c267d)</li> </ul>"},{"location":"changelog/#142-2025-07-25","title":"1.4.2 (2025-07-25)","text":""},{"location":"changelog/#-bug-fixes_1","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>config: fixes null strings in config (86fb9bc), closes #40</li> </ul>"},{"location":"changelog/#141-2025-07-23","title":"1.4.1 (2025-07-23)","text":""},{"location":"changelog/#-bug-fixes_2","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>decypharr: correct return value when config file is not found (4ec1b68)</li> </ul>"},{"location":"changelog/#140-2025-07-23","title":"1.4.0 (2025-07-23)","text":""},{"location":"changelog/#-features","title":"\u2728 Features","text":"<ul> <li>api: expand API functionality (f081132)</li> <li>config: add origin field to config (f081132)</li> <li>config: enhance service management (f081132)</li> </ul>"},{"location":"changelog/#-bug-fixes_3","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>decypharr: handle missing config file gracefully (f081132)</li> <li>rclone: prevent overwriting config with multiple instances (f081132)</li> <li>workflows: correct echo command in cache cleanup (a5124c6)</li> <li>zurg: add version comparison during setup (f081132)</li> </ul>"},{"location":"changelog/#-other-changes","title":"\ud83e\udd21 Other Changes","text":"<ul> <li>deps: update backend dependencies (f081132)</li> </ul>"},{"location":"changelog/#-refactors_1","title":"\ud83d\udee0\ufe0f Refactors","text":"<ul> <li>rclone: streamline setup logic and reduce redundancy (f081132)</li> </ul>"},{"location":"changelog/#132-2025-07-11","title":"1.3.2 (2025-07-11)","text":""},{"location":"changelog/#-bug-fixes_4","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>docker: correct environment variable reference for buildx cache root path (5ded5fe)</li> <li>docker: remove unnecessary variable assignment in cleanup-cache job (08ddd0e)</li> </ul>"},{"location":"changelog/#-cicd-pipeline","title":"\ud83d\ude80 CI/CD Pipeline","text":"<ul> <li>workflows: parallel docker build (bd3f4bc)</li> </ul>"},{"location":"changelog/#-build-system","title":"\ud83d\udee0\ufe0f Build System","text":"<ul> <li>docker: add checkout action to setup job for version and repository variables (af043f5)</li> <li>docker: add cleanup-cache job to prune buildx cache after builds (1474db1)</li> <li>docker: add image tag selection and pull step for version extraction (4804ca5)</li> <li>docker: add python3 make g++ git ca-certificates to dumb frontend build (f4cfc3f)</li> <li>docker: change to use /dev/shm (9b5ac34)</li> <li>docker: enhance CI workflow by adding setup job for version and repository variables (56afd5d)</li> <li>docker: fix cleanup command in cli_debrid-builder to remove all extracted files (7e8f92d)</li> <li>docker: optimize pnpm configuration for frontend builds (7021918)</li> <li>docker: refactor Dockerfile to consolidate base image and streamline build stages (44e646e)</li> <li>docker: refactor frontend build steps and improve npm configuration (ee09571)</li> <li>docker: split pnpm build (92c85cf)</li> <li>docker: test ramdisk for builds (051d6b0)</li> <li>docker: update environment variable handling to use GITHUB_OUTPUT instead of GITHUB_ENV (76494d6)</li> </ul>"},{"location":"changelog/#131-2025-06-30","title":"1.3.1 (2025-06-30)","text":""},{"location":"changelog/#-other-changes_1","title":"\ud83e\udd21 Other Changes","text":"<ul> <li>deps: bump fastapi from 0.115.12 to 0.115.14 (#19) (4fa13c8)</li> <li>update docker-compose.yml (e67185e)</li> </ul>"},{"location":"changelog/#-documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>readme: Minor readme tweak (#21) (e1283bc)</li> <li>readme: refine project list and update usage notes (2d7a98c)</li> <li>readme: update compose to include /mnt/debrid (1d29a0f)</li> <li>readme: update project list with new entries and correct Discord link (fa63133)</li> </ul>"},{"location":"changelog/#-build-system_1","title":"\ud83d\udee0\ufe0f Build System","text":"<ul> <li>deps: Upgrade dependencies (d2f1d10)</li> </ul>"},{"location":"changelog/#130-2025-06-27","title":"1.3.0 (2025-06-27)","text":""},{"location":"changelog/#-features_1","title":"\u2728 Features","text":"<ul> <li>core: Improve core service startup (8226f42)</li> <li>decypharr: Adds patching to Decypharr config for default configuration (8226f42)</li> </ul>"},{"location":"changelog/#121-2025-06-26","title":"1.2.1 (2025-06-26)","text":""},{"location":"changelog/#-bug-fixes_5","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>phalanx: Updates Phalanx DB setup to support v0.55 (353e21f)</li> <li>setup_pnpm_environment: Addresses potential EAGAIN errors during pnpm install by checking both stdout and stderr. (353e21f)</li> </ul>"},{"location":"changelog/#-other-changes_2","title":"\ud83e\udd21 Other Changes","text":"<ul> <li>gitignore: Adds decypharr to gitignore. (353e21f)</li> </ul>"},{"location":"changelog/#120-2025-06-25","title":"1.2.0 (2025-06-25)","text":""},{"location":"changelog/#-features_2","title":"\u2728 Features","text":"<ul> <li>postgres: add migration from legacy role 'DMB' to 'DUMB' (63a5a05)</li> </ul>"},{"location":"changelog/#111-2025-06-24","title":"1.1.1 (2025-06-24)","text":""},{"location":"changelog/#-bug-fixes_6","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>logs: correct logical condition for process name checks (5f86762)</li> </ul>"},{"location":"changelog/#110-2025-06-24","title":"1.1.0 (2025-06-24)","text":""},{"location":"changelog/#-features_3","title":"\u2728 Features","text":"<ul> <li>plex: add Plex server FriendlyName configuration (666e2a1)</li> </ul>"},{"location":"changelog/#-bug-fixes_7","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>api: Add static plex url for frontend settings page (666e2a1)</li> <li>plex: claiming functionality (666e2a1)</li> </ul>"},{"location":"changelog/#102-2025-06-24","title":"1.0.2 (2025-06-24)","text":""},{"location":"changelog/#-bug-fixes_8","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>api: add temp patches for dmbdb frontend (6b76806)</li> </ul>"},{"location":"changelog/#101-2025-06-24","title":"1.0.1 (2025-06-24)","text":""},{"location":"changelog/#-bug-fixes_9","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>config: rename config files (394e929)</li> </ul>"},{"location":"changelog/#-other-changes_3","title":"\ud83e\udd21 Other Changes","text":"<ul> <li>deps: bump python-dotenv from 1.1.0 to 1.1.1 (#7) (5945b54)</li> </ul>"},{"location":"changelog/#100-2025-06-20","title":"1.0.0 (2025-06-20)","text":""},{"location":"changelog/#-breaking-changes","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>DUMB: initial DUMB push</li> </ul>"},{"location":"changelog/#-features_4","title":"\u2728 Features","text":"<ul> <li>DUMB: initial DUMB push (e212248)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#-contributing-to-dumb","title":"\ud83e\udd1d Contributing to DUMB","text":"<p>Thank you for your interest in contributing to Debrid Unlimited Media Bridge (DUMB)!</p> <p>We welcome all forms of contributions \u2014 not just code.</p> <p>DUMB is an open-source, community-driven project. </p> <p>Whether you're a developer, power user, or just someone passionate about improving media automation, your help is always appreciated!</p> <p>Thank you for helping make DUMB better for everyone!</p>"},{"location":"contributing/#-development-contributions","title":"\ud83d\udc68\u200d\ud83d\udcbb Development Contributions","text":"<p>Want to help develop new features, fix bugs, or improve performance?</p>"},{"location":"contributing/#recommended-setup","title":"Recommended Setup","text":"<p>The easiest way to contribute code is through the DUMB Dev Container, which includes all the required tools:</p> <ul> <li>Based on: <code>iampuid0/dumb:latest</code></li> <li>Python with Black autoformatter</li> <li>Port forwarding for common services</li> <li>Preconfigured workspace mounts</li> </ul> <p>You can find the devcontainer setup file in the repo.</p>"},{"location":"contributing/#how-to-get-started","title":"How to Get Started","text":"<ol> <li>Fork the DUMB repository</li> <li>Clone your fork locally</li> <li>Open in VS Code using Dev Containers</li> <li>Make your changes, format with <code>black</code>, and submit a pull request</li> </ol> <p>If you\u2019re not using VS Code or Dev Containers, you can also run the project via Docker with the same mounts shown in the <code>devcontainer.json</code>.</p>"},{"location":"contributing/#-non-code-contributions","title":"\ud83c\udf1f Non-Code Contributions","text":"<p>Even if you don't write code, there are plenty of ways to help!</p>"},{"location":"contributing/#-star-the-repo","title":"\u2b50 Star the Repo","text":"<p>A quick way to show support is by starring the project on GitHub:  github.com/I-am-PUID-0/DUMB</p>"},{"location":"contributing/#-join-the-community","title":"\ud83d\udde3\ufe0f Join the Community","text":"<ul> <li>Ask questions or help others in the DUMB Discord server</li> <li>Boost the server if you find it helpful \ud83d\ude4c</li> <li>Share your setups and improvements</li> </ul>"},{"location":"contributing/#-help-with-documentation","title":"\ud83d\udcda Help with Documentation","text":"<ul> <li>Found a typo or confusing section in the docs? Open an issue or pull request.</li> <li>Suggestions and feedback on existing documentation are always welcome.</li> </ul>"},{"location":"contributing/#-monetary-contributions","title":"\ud83e\uddfe Monetary Contributions?","text":"<ul> <li>Sponsor the Dev through GitHub Sponsors</li> </ul>"},{"location":"contributing/#-roadmap--feedback","title":"\ud83d\udee3\ufe0f Roadmap &amp; Feedback","text":"<p>If you have ideas, feature requests, or feedback:</p> <ul> <li> <p>Create a GitHub Issue</p> </li> <li> <p>Discuss in the community before starting larger PRs</p> </li> </ul>"},{"location":"api/","title":"\u2699\ufe0f DUMB API","text":"<p>DUMB includes a built-in REST API and WebSocket server to allow programmatic control of services, logging, and system state.</p> <p>The API is enabled and configured using the <code>dumb_config.json</code> under the <code>dumb.api_service</code> section. For example:</p> <pre><code>\"api_service\": {\n  \"enabled\": true,\n  \"process_name\": \"DUMB API\",\n  \"log_level\": \"INFO\",\n  \"host\": \"127.0.0.1\",\n  \"port\": 8000\n}\n</code></pre>"},{"location":"api/#-features","title":"\u2728 Features","text":"<ul> <li>Health checks</li> <li>Process management (start, stop, restart services)</li> <li>Real-time log streaming via WebSocket</li> <li>Configuration viewing and updates (in-memory and persistent)</li> <li>Environment state inspection</li> </ul>"},{"location":"api/#-common-endpoints","title":"\ud83d\udd01 Common Endpoints","text":"Method Path Description GET <code>/processes</code> List all services in <code>dumb_config.json</code> POST <code>/start-service</code> Start a specific service POST <code>/stop-service</code> Stop a specific service POST <code>/restart-service</code> Restart a specific service GET <code>/service-status</code> Get the current status of a service WS <code>/logs</code> Real-time log streaming"},{"location":"api/#-directory-structure","title":"\ud83d\uddc2\ufe0f Directory Structure","text":"<p>The DUMB API is split into the following modules:</p> File Purpose <code>api_service.py</code> Initializes and launches the FastAPI app <code>api_state.py</code> Tracks and updates service runtime state <code>connection_manager.py</code> Manages WebSocket client connections <code>config.py</code> Endpoints for working with <code>dumb_config.json</code> and service configs <code>health.py</code> Health check endpoint for validating API status <code>logs.py</code> REST endpoint for reading historical logs <code>websocket_logs.py</code> WebSocket server for streaming real-time logs to frontend <code>process.py</code> Service control for backend processes (start, stop, restart)"},{"location":"api/#-api-documentation","title":"\ud83e\udded API Documentation","text":"<p>DUMB provides built-in API documentation through two convenient endpoints:</p> <ul> <li> <p>FastAPI Swagger UI   Accessible at: <code>http://&lt;host&gt;:&lt;port&gt;/docs</code>   This interface allows for interactive testing and exploring of all available REST endpoints.</p> </li> <li> <p>Scalar (ReDoc-style) Docs   Accessible at: <code>http://&lt;host&gt;:&lt;port&gt;/scalar</code>   A clean, read-only view of the full OpenAPI schema for the DUMB API.</p> </li> </ul> <p>These are helpful for development, debugging, and integrating external systems with DUMB.</p>"},{"location":"api/#-next-steps","title":"\ud83d\udcda Next Steps","text":"<p>Click on any of the modules in the sidebar to explore endpoint structure, usage examples, and development guidelines for extending the DUMB API:</p> <ul> <li>Health Check</li> <li>Logs</li> <li>Process Management</li> <li>Configuration</li> <li>WebSocket Logs</li> </ul>"},{"location":"api/config/","title":"Configuration API","text":"<p>The Configuration API is responsible for exposing endpoints that manage and manipulate DUMB's configuration settings (<code>dumb_config.json</code>). These endpoints provide tools for loading, updating, saving, and validating configuration data for all DUMB services.</p>"},{"location":"api/config/#-module-configpy","title":"\ud83e\udde9 Module: <code>config.py</code>","text":"<p>Located in: <code>api/routes/config.py</code></p>"},{"location":"api/config/#-endpoints","title":"\ud83d\udcd8 Endpoints","text":""},{"location":"api/config/#get-config","title":"<code>GET /config</code>","text":"<p>Description: Returns the currently loaded in-memory configuration.</p> <p>Usage Example: <pre><code>curl http://localhost:8000/config\n</code></pre></p>"},{"location":"api/config/#post-config","title":"<code>POST /config</code>","text":"<p>Description: Accepts an updated config object and applies it in memory.</p> <p>Usage Example: <pre><code>curl -X POST http://localhost:8000/config \\\n  -H \"Content-Type: application/json\" \\\n  -d @updated_config.json\n</code></pre></p>"},{"location":"api/config/#post-configsave","title":"<code>POST /config/save</code>","text":"<p>Description: Saves the current in-memory config to the <code>dumb_config.json</code> file.</p> <p>Usage Example: <pre><code>curl -X POST http://localhost:8000/config/save\n</code></pre></p>"},{"location":"api/config/#post-configvalidate","title":"<code>POST /config/validate</code>","text":"<p>Description: Validates the structure and format of a provided config file (without applying changes).</p> <p>Usage Example: <pre><code>curl -X POST http://localhost:8000/config/validate \\\n  -H \"Content-Type: application/json\" \\\n  -d @test_config.json\n</code></pre></p>"},{"location":"api/config/#-developer-notes","title":"\ud83e\uddea Developer Notes","text":"<ul> <li>The config is held in memory for fast access and allows the user to experiment or preview changes before committing them to file.</li> <li>Validation uses internal DUMB schema checks to ensure required keys and structure.</li> <li>Routes include error handling for malformed config data.</li> </ul>"},{"location":"api/config/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Services Overview</li> <li>Logs</li> </ul>"},{"location":"api/health/","title":"\ud83c\udf0a Health Check API","text":"<p>The Health Check API provides a simple mechanism to verify that the DUMB container and core services are operational.</p>"},{"location":"api/health/#-endpoint","title":"\ud83d\udd0d Endpoint","text":""},{"location":"api/health/#get-health","title":"<code>GET /health</code>","text":"<p>Returns a JSON response indicating whether the container is healthy.</p>"},{"location":"api/health/#response","title":"Response","text":"<pre><code>{\n  \"status\": \"healthy\"\n}\n</code></pre> <p>If the check fails, the status will be <code>\"unhealthy\"</code> and include diagnostic output.</p>"},{"location":"api/health/#-use-case","title":"\ud83d\udcca Use Case","text":"<ul> <li>Used by orchestrators or monitoring tools to confirm container availability.</li> <li>Can be used to gate traffic in load balancers or uptime monitoring dashboards.</li> </ul>"},{"location":"api/health/#-implementation","title":"\u2728 Implementation","text":"<p>This route executes a background health check script in the container: <pre><code>/healthcheck.py\n</code></pre> It runs within the same virtual environment as DUMB and ensures all critical files, paths, and subprocesses are functional.</p>"},{"location":"api/health/#-related","title":"\ud83d\udd17 Related","text":"<ul> <li>API Overview</li> <li>Process Management</li> </ul>"},{"location":"api/logs/","title":"Logs API","text":"<p>The Logs API allows clients to retrieve recent logs captured by DUMB and served through the API.</p>"},{"location":"api/logs/#-endpoint","title":"\ud83d\udd0d Endpoint","text":"<pre><code>GET /logs\n</code></pre>"},{"location":"api/logs/#-query-parameters","title":"\ud83e\uddfe Query Parameters","text":"Parameter Type Description <code>lines</code> int Number of recent log lines to return (default: 100). <code>level</code> string Optional filter by log level (e.g., <code>INFO</code>, <code>ERROR</code>, <code>DEBUG</code>). <code>name</code> string Optional filter by process or service name (e.g., <code>riven</code>, <code>postgres</code>)."},{"location":"api/logs/#-example-request","title":"\ud83e\uddea Example Request","text":"<pre><code>GET /logs?lines=50&amp;level=ERROR&amp;name=zilean\n</code></pre> <p>This request fetches the last 50 lines of logs for the <code>zilean</code> service that have an <code>ERROR</code> log level.</p>"},{"location":"api/logs/#-response-format","title":"\u2705 Response Format","text":"<p>Returns a JSON array of log entries:</p> <pre><code>[\n  \"2024-04-01 12:00:01 INFO rclone: Mount started successfully\",\n  \"2024-04-01 12:01:02 ERROR zilean: Failed to connect to database\"\n]\n</code></pre>"},{"location":"api/logs/#-notes","title":"\u26a0\ufe0f Notes","text":"<ul> <li>This endpoint provides logs captured by DUMB's internal logger and may not reflect stdout/stderr of subprocesses unless specifically routed.</li> <li>Filtering by <code>name</code> is useful to narrow down issues with a specific subprocess.</li> </ul>"},{"location":"api/logs/#-related","title":"\ud83e\uddf1 Related","text":"<ul> <li>Real-Time WebSocket Logs for live streaming logs.</li> <li>Process Management for interacting with services whose logs may be captured here.</li> </ul>"},{"location":"api/process/","title":"Process Management","text":""},{"location":"api/process/#title-process-management-api","title":"title: Process Management API","text":""},{"location":"api/process/#-process-management-api","title":"\u2699\ufe0f Process Management API","text":"<p>The Process Management endpoints handle the launching, stopping, restarting, and tracking of subprocesses managed by DUMB.</p>"},{"location":"api/process/#-endpoints","title":"\ud83d\udd04 Endpoints","text":""},{"location":"api/process/#get-processprocesses","title":"<code>GET /process/processes</code>","text":"<p>Returns a list of all configured processes, including both running and stopped services. This includes metadata like enabled status, version, and repository URL.</p>"},{"location":"api/process/#-example-response","title":"\u2705 Example Response:","text":"<pre><code>{\n  \"processes\": [\n    {\n      \"name\": \"rclone w/ RealDebrid\",\n      \"process_name\": \"rclone w/ RealDebrid\",\n      \"enabled\": true,\n      \"config\": { \"enabled\": true, ... },\n      \"version\": \"1.65.1\",\n      \"key\": \"rclone\",\n      \"config_key\": \"rclone\",\n      \"repo_url\": \"https://rclone.org\"\n    },\n    {\n      \"name\": \"Zurg w/ RealDebrid\",\n      \"process_name\": \"Zurg w/ RealDebrid\",\n      \"enabled\": false,\n      \"config\": { \"enabled\": false, ... },\n      \"version\": \"0.5.2\",\n      \"key\": \"zurg\",\n      \"config_key\": \"zurg\",\n      \"repo_url\": \"https://github.com/I-am-PUID-0/DUMB\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/process/#get-process","title":"<code>GET /process</code>","text":"<p>Fetch details about a specific process including the config block, version, and config key.</p>"},{"location":"api/process/#-required-query-parameter","title":"\u26a0\ufe0f Required Query Parameter:","text":"<ul> <li><code>process_name</code> (string)</li> </ul>"},{"location":"api/process/#-example-response_1","title":"\u2705 Example Response:","text":"<pre><code>{\n  \"process_name\": \"rclone w/ RealDebrid\",\n  \"config\": { \"enabled\": true, ... },\n  \"version\": \"1.65.1\",\n  \"config_key\": \"rclone\"\n}\n</code></pre>"},{"location":"api/process/#post-processstart","title":"<code>POST /process/start</code>","text":"<p>Starts a specific process using its name as defined in <code>dumb_config.json</code>.</p>"},{"location":"api/process/#-request-body","title":"\ud83d\udd27 Request Body:","text":"<pre><code>{\n  \"process_name\": \"rclone w/ RealDebrid\"\n}\n</code></pre>"},{"location":"api/process/#-example-response_2","title":"\u2705 Example Response:","text":"<pre><code>{\n  \"status\": \"Service started successfully\",\n  \"process_name\": \"rclone w/ RealDebrid\"\n}\n</code></pre>"},{"location":"api/process/#post-processstop","title":"<code>POST /process/stop</code>","text":"<p>Stops a running process.</p>"},{"location":"api/process/#-request-body_1","title":"\ud83d\udd27 Request Body:","text":"<pre><code>{\n  \"process_name\": \"rclone w/ RealDebrid\"\n}\n</code></pre>"},{"location":"api/process/#post-processrestart","title":"<code>POST /process/restart</code>","text":"<p>Restarts a running process.</p>"},{"location":"api/process/#-request-body_2","title":"\ud83d\udd27 Request Body:","text":"<pre><code>{\n  \"process_name\": \"rclone w/ RealDebrid\"\n}\n</code></pre>"},{"location":"api/process/#get-processservice-status","title":"<code>GET /process/service-status</code>","text":"<p>Gets the current status of a process</p>"},{"location":"api/process/#-example-response_3","title":"\u2705 Example Response:","text":"<pre><code>{\n  \"process_name\": \"rclone w/ RealDebrid\",\n  \"status\": \"running\"\n}\n</code></pre>"},{"location":"api/process/#post-processstart-core-service","title":"<code>POST /process/start-core-service</code>","text":"<p>Starts one or more core services and all required dependencies, optionally starting optional services as well. This endpoint is primarily used during the onboarding process by the DUMB frontend to prepare services like Riven, Decypharr, or Plex Debrid.</p>"},{"location":"api/process/#-request-body-examples","title":"\ud83d\udd27 Request Body Examples:","text":"<p>Riven Backend</p> <pre><code>{\n  \"core_services\": {\n    \"name\": \"Riven Backend\",\n    \"debrid_service\": \"RealDebrid\",\n    \"debrid_key\": \"abc123\",\n    \"service_options\": {}\n  },\n  \"optional_services\": [\"zilean\",\"pgadmin\", \"riven_frontend\"]\n}\n</code></pre> <p>Decypharr</p> <pre><code>{\n  \"core_services\": {\n    \"name\": \"Decypharr\",\n    \"debrid_service\": \"RealDebrid\",\n    \"debrid_key\": \"abc123\",\n    \"service_options\": {}\n  },\n  \"optional_services\": []\n}\n</code></pre> <p>CLI Debrid</p> <pre><code>{\n  \"core_services\": {\n    \"name\": \"CLI Debrid\",\n    \"debrid_service\": \"RealDebrid\",\n    \"debrid_key\": \"abc123\",\n    \"service_options\": {\n      \"phalanx_db\": { \"enabled\": true }\n    }\n  },\n  \"optional_services\": [\"zilean\"]\n}\n</code></pre> <p>Plex Debrid</p> <pre><code>{\n  \"core_services\": {\n    \"name\": \"Plex Debrid\",\n    \"debrid_service\": \"RealDebrid\",\n    \"debrid_key\": \"abc123\",\n    \"service_options\": {\n      \"rclone\": { \"log_level\": \"DEBUG\" },\n      \"zurg\": { \"port\": 9194 }\n    }\n  },\n  \"optional_services\": []\n}\n```json\n</code></pre> <p>The <code>core_services</code> field can be a single object or an array. Each core service will:</p> <ul> <li>Automatically provision any missing dependency instances (e.g. rclone/zurg).</li> <li>Apply any <code>service_options</code> overrides (e.g. log levels, ports).</li> <li>Start in the correct order, verifying success.</li> </ul>"},{"location":"api/process/#-example-response_4","title":"\u2705 Example Response:","text":"<pre><code>{\n  \"results\": [\n    {\"service\": \"Riven Backend\", \"status\": \"started\"},\n    {\"service\": \"Decypharr\", \"status\": \"started\"}\n  ],\n  \"errors\": []\n}\n</code></pre>"},{"location":"api/process/#\u2139-notes","title":"\u2139\ufe0f Notes:","text":"<ul> <li>Dependencies like Zurg or Rclone will be created using templates and attached to the calling core service.</li> <li>Optional services such as <code>pgadmin</code> or <code>zilean</code> are only started if included and configured.</li> <li><code>debrid_key</code> is injected into Zurg if required.</li> <li><code>service_options</code> can override config values such as <code>log_level</code>, <code>port</code>, or <code>enabled</code>.</li> <li>Any startup errors will appear in the <code>errors</code> list with detailed messages.</li> </ul>"},{"location":"api/process/#-notes","title":"\ud83e\uddd0 Notes","text":"<ul> <li>All process names are matched against the entries defined in <code>dumb_config.json</code>.</li> <li>Most process commands are defined as arrays and are managed with subprocess handling inside Python.</li> </ul>"},{"location":"api/process/#-related-files","title":"\ud83d\udccc Related Files","text":"<ul> <li><code>process.py</code></li> <li><code>Configuration</code></li> </ul>"},{"location":"api/websocket_logs/","title":"WebSocket Logs API","text":"<p>The WebSocket Logs API provides a real-time streaming interface for receiving logs from all DUMB-managed subprocesses. It is primarily used by the DUMB Frontend to power the live log viewer.</p>"},{"location":"api/websocket_logs/#-websocket-endpoint","title":"\ud83d\udce1 WebSocket Endpoint","text":"<pre><code>/ws/logs\n</code></pre> <p>Connect to this endpoint using a WebSocket client (e.g., browser or Python client) to receive structured log entries in JSON format.</p>"},{"location":"api/websocket_logs/#-message-format","title":"\ud83d\udd01 Message Format","text":"<p>Each log entry sent through the WebSocket has the following structure:</p> <pre><code>{\n  \"message\": \"[INFO] riven_backend: Startup complete\",\n  \"level\": \"INFO\",\n  \"process_name\": \"riven_backend\",\n  \"timestamp\": \"2025-04-01T12:34:56.789Z\"\n}\n</code></pre>"},{"location":"api/websocket_logs/#fields","title":"Fields:","text":"<ul> <li>message: Raw log message as a string</li> <li>level: Log level (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, etc.)</li> <li>process_name: Name of the subprocess that generated the log</li> <li>timestamp: ISO 8601 formatted UTC timestamp</li> </ul>"},{"location":"api/websocket_logs/#-filtering-logs-client-side","title":"\ud83d\udd0d Filtering Logs (Client-side)","text":"<p>The server pushes all logs to connected clients. It is up to the client to filter based on:</p> <ul> <li>Process Name</li> <li>Log Level</li> <li>Search Term</li> </ul> <p>The DUMB Frontend implements dropdowns and search bars for this purpose.</p>"},{"location":"api/websocket_logs/#-connection-behavior","title":"\ud83d\uded1 Connection Behavior","text":"<ul> <li>The server broadcasts logs to all connected WebSocket clients.</li> <li>If the connection is dropped, reconnect using <code>/ws/logs</code>.</li> <li>Log history is not buffered, so missed logs are not resent on reconnect.</li> </ul>"},{"location":"api/websocket_logs/#-example-python-client","title":"\ud83e\uddea Example (Python Client)","text":"<pre><code>import websockets\nimport asyncio\nimport json\n\nasync def consume_logs():\n    uri = \"ws://localhost:8000/ws/logs\"\n    async with websockets.connect(uri) as websocket:\n        async for message in websocket:\n            log = json.loads(message)\n            print(f\"[{log['level']}] {log['process_name']}: {log['message']}\")\n\nasyncio.run(consume_logs())\n</code></pre>"},{"location":"api/websocket_logs/#-related-modules","title":"\ud83d\udcce Related Modules","text":"<ul> <li><code>websocket_logs.py</code></li> <li>Logs API for historical log file access</li> <li>Frontend Log Viewer</li> </ul>"},{"location":"deployment/","title":"\ud83d\ude80 Deployment Overview","text":"<p>DUMB can be deployed across a variety of platforms and environments. Whether you're using Docker, Portainer, Unraid, WSL2, or other systems like TrueNAS, Synology, or QNAP, this section will guide you through the available options to get DUMB up and running.</p> <p>All deployment methods provide access to the same integrated services and configurations, with slight differences in how the container is started and managed.</p>"},{"location":"deployment/#-available-deployment-guides","title":"\ud83d\udce6 Available Deployment Guides","text":""},{"location":"deployment/#-docker-compose","title":"\ud83d\udc33 Docker Compose","text":"<p>Quickest way to get started using Docker CLI and <code>docker-compose.yml</code>.</p> <ul> <li>Deploy with Docker</li> </ul>"},{"location":"deployment/#-dockge","title":"\ud83e\uddf0 Dockge","text":"<p>Deploy using the lightweight Dockge container manager.</p> <ul> <li>Deploy with Dockge</li> </ul>"},{"location":"deployment/#-portainer","title":"\ud83d\udcda Portainer","text":"<p>Deploy using the Portainer web interface.</p> <ul> <li>Deploy with Portainer</li> </ul>"},{"location":"deployment/#-unraid","title":"\ud83e\uddef Unraid","text":"<p>Deploy using the Unraid Community Applications plugin and container template.</p> <ul> <li>Deploy with Unraid</li> </ul>"},{"location":"deployment/#-wsl2-windows-subsystem-for-linux","title":"\ud83d\udcbb WSL2 (Windows Subsystem for Linux)","text":"<p>Deploy DUMB in a WSL2 environment on Windows 11.</p> <ul> <li>Deploy with WSL</li> </ul>"},{"location":"deployment/#-proxmox","title":"\ud83d\udce6 Proxmox","text":"<p>Deploy inside a lightweight container or VM using Proxmox VE.</p> <ul> <li>Deploy with Proxmox</li> </ul>"},{"location":"deployment/#-qnap","title":"\ud83e\udde0 QNAP","text":"<p>Deploy using Container Station or Docker on supported QNAP NAS devices.</p> <ul> <li>Deploy with QNAP</li> </ul>"},{"location":"deployment/#-synology","title":"\ud83e\uddca Synology","text":"<p>Deploy using Synology Docker and DSM's GUI or CLI.</p> <ul> <li>Deploy with Synology</li> </ul>"},{"location":"deployment/#-truenas","title":"\ud83d\udcbe TrueNAS","text":"<p>Deploy on TrueNAS SCALE using Docker or native Apps.</p> <ul> <li>Deploy with TrueNAS</li> </ul>"},{"location":"deployment/#-additional-notes","title":"\ud83d\udd10 Additional Notes","text":"<ul> <li>All methods rely on a valid and accessible <code>dumb_config.json</code> file for configuring services.</li> <li>It is strongly recommended to bind-mount a local <code>config</code> directory to persist user data.</li> </ul> <p>Example: <pre><code>dumb:\n  image: iampuid0/dumb:latest\n  volumes:\n    - ./config:/config\n</code></pre></p> <p>For more about configuring services, see the Configuration page.</p>"},{"location":"deployment/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Service Overview</li> <li>Features</li> </ul>"},{"location":"deployment/docker/","title":"Deploy with Docker","text":""},{"location":"deployment/docker/#-deploying-dumb-with-docker","title":"\ud83d\udce6 Deploying DUMB with Docker","text":"<p>This guide will walk you through every step, from installing Docker to setting up and running the DUMB container. </p> <p>Whether you're new to Docker or just need a quick refresher, you'll be up and running in no time.</p>"},{"location":"deployment/docker/#-prerequisites","title":"\u2705 Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li>A system running Ubuntu 20.04 or later </li> <li>A non-root user with <code>sudo</code> privileges  </li> <li>An active internet connection  </li> <li>Basic familiarity with using the terminal</li> </ul> <p>Tip</p> <p>This guide assumes you're installing Docker on a fresh Ubuntu setup. If you're on Windows, refer to the Windows Setup Guide (Docker/WSL).</p>"},{"location":"deployment/docker/#-install-docker","title":"\ud83d\udc33 Install Docker","text":"<ol> <li>From Ubuntu, install Docker by pasting the following into the Ubuntu Command Line Interface (CLI); follow the prompts.  <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n</code></pre></li> </ol> <p>Note</p> <p>If you receive the following prompt during the Docker install, then follow the steps here: Windows Setup Guide (Docker/WSL) <pre><code>WSL DETECTED: We recommend using Docker Desktop for Windows.\nPlease get Docker Desktop from https://www.docker.com/products/docker-desktop/\n</code></pre></p>"},{"location":"deployment/docker/#-confirm-docker-install","title":"\u2705 Confirm Docker Install","text":"<ol> <li>Enter the following command: <pre><code>docker compose version\n</code></pre></li> <li>If the output is similar to the below, then docker and docker compose were successfully installed: <pre><code>ubuntu@DUMB:~$ docker compose version\nDocker Compose version v2.24.2\n</code></pre></li> </ol>"},{"location":"deployment/docker/#-define-the-directory-structure","title":"\ud83d\udcc1 Define the Directory Structure","text":"<p>Note</p> <p>If you already have a directory structure you'd like to use, then you can skip this step.</p> <ol> <li> <p>Create a directory for docker in your user directory and change directories to docker. <pre><code>cd ~ &amp;&amp; mkdir docker &amp;&amp; cd docker\n</code></pre></p> </li> <li> <p>Create the DUMB directories. <pre><code>mkdir -p DUMB/config DUMB/log DUMB/Zurg/RD DUMB/Riven/data DUMB/PostgreSQL/data DUMB/pgAdmin4/data DUMB/Zilean/data DUMB/plex_debrid DUMB/plex DUMB/decypharr DUMB/cli_debrid DUMB/phalanx_db DUMB/mnt/debrid\n</code></pre></p> </li> </ol>"},{"location":"deployment/docker/#-download-and-edit-the-docker-composeyml","title":"\u270f\ufe0f Download and Edit the docker-compose.yml","text":"<p>Important</p> <p>The docker-compose.yml file will need to be edited to include the necessary environment variable values.</p> <ol> <li> <p>Download the latest docker-compose.yml from the GitHub repository with the following: <pre><code>curl -O https://raw.githubusercontent.com/I-am-PUID-0/DUMB/master/docker-compose.yml\n</code></pre></p> </li> <li> <p>Run the following command to update the paths in the <code>docker-compose.yml</code> <pre><code>sed -i \"s|/home/username/docker/DUMB|$HOME/docker/DUMB|g\" docker-compose.yml\n</code></pre></p> </li> <li> <p>Run the following command to update the <code>docker-compose.yml</code></p> </li> </ol> <p>timezone</p> <p>The bellow command defaults to <code>TZ=UTC</code>, update while running the command if desired</p> <pre><code>read -p \"Enter your timezone [UTC]: \" TZ &amp;&amp; TZ=${TZ:-UTC} &amp;&amp; \\\nsed -i \\\n  -e \"s|TZ=|TZ=$TZ|\" \\\n  -e \"s|PUID=|PUID=$(id -u)|\" \\\n  -e \"s|PGID=|PGID=$(id -g)|\" \\\n  docker-compose.yml\n</code></pre>"},{"location":"deployment/docker/#-start-up-the-docker-compose","title":"\ud83d\ude80 Start up the Docker Compose","text":"<p>Note</p> <p>The following command starts Docker Compose in detached mode, meaning it runs in the background and frees up your terminal.</p> <p>If you omit the <code>-d</code> flag, Docker Compose will run in the foreground, streaming all container logs directly to your terminal. </p> <p>This is useful for debugging or monitoring in real time, but you will need to open another terminal to run additional commands while it's running.</p> <ul> <li>Pressing <code>Ctrl + C</code> will shut down all running containers.</li> <li>To exit without stopping the container(s), you must start Docker Compose in detached mode using <code>-d</code>.</li> </ul> <p>\u26a0\ufe0f There is no built-in \"detach shortcut\" when running in the foreground \u2014 to keep containers running after exit, always use the below command</p> <pre><code>sudo docker compose up -d\n</code></pre> <p>Example output: <pre><code>ubuntu@DUMB:~/docker$ sudo docker compose up -d\n[+] Running 1/2\n \u280b Network docker_default  Created                                                                                                                                                       1.1s \n \u2714 Container DUMB       Started  \n</code></pre></p> <p>\u2705 Once started, the container will run in the background.</p>"},{"location":"deployment/docker/#-thats-it","title":"\ud83c\udf89 That\u2019s It!","text":"<p>Once deployed, DUMB will initialize and make its services available at their respective ports (e.g., DUMB Frontend at <code>:3005</code>, API at <code>:8000</code>, etc.).</p> <p>You can now manage DUMB entirely through the DUMB Frontend, or explore the Configuration docs to adjust settings as needed.</p>"},{"location":"deployment/docker/#-additional-useful-commands","title":"\ud83d\udee0\ufe0f Additional Useful Commands","text":""},{"location":"deployment/docker/#-attach-to-the-running-container","title":"\u25b6\ufe0f Attach to the Running Container","text":"<pre><code>sudo docker attach DUMB\n</code></pre>"},{"location":"deployment/docker/#-detach-without-stopping-the-container","title":"\ud83d\udd04 Detach Without Stopping the Container","text":"<p>Press Ctrl + P followed by Ctrl + Q.</p> <p>This sequence sends a signal to Docker to detach from the container while leaving it running in the background.</p> <p>Important</p> <p>Use this sequence rather than simply closing the terminal window or using Ctrl + C, as those actions might stop the container.</p> <p>Note</p> <p>Remember, Ctrl + P + Ctrl + Q must be pressed in quick succession.</p> <p>You press Ctrl + P first, and while holding Ctrl, press Q.</p> <p>After this, you will be returned to your host terminal, and the container will continue to run in the background.</p>"},{"location":"deployment/docker/#-view-docker-container-logs","title":"\ud83d\udcdc View Docker Container Logs","text":"<p>To view the container logs, enter the following:</p> <pre><code>sudo docker container logs DUMB\n</code></pre> <p>Alternatively, use -f to follow the logs in real-time. </p> <p>You can exit with Ctrl + C (this does not stop the container).</p> <pre><code>sudo docker logs -f DUMB\n</code></pre>"},{"location":"deployment/docker/#-shutdown-docker-compose","title":"\ud83e\uddef Shutdown Docker Compose","text":"<pre><code>sudo docker compose down\n</code></pre> <p>Example output: <pre><code>ubuntu@DUMB:~/docker$ sudo docker compose down\n[+] Running 2/2\n\u2714 Container DUMB       Removed                                                                                                                                                      10.4s \n\u2714 Network docker_default  Removed     \n</code></pre></p>"},{"location":"deployment/portainer/","title":"Deploy with Portainer","text":""},{"location":"deployment/portainer/#-deploying-dumb-with-portainer","title":"\ud83d\udea2 Deploying DUMB with Portainer","text":"<p>Portainer provides a user-friendly web interface for managing Docker containers and stacks. This guide walks you through deploying Debrid Unlimited Media Bridge (DUMB) using Portainer's stack deployment feature.</p>"},{"location":"deployment/portainer/#-prerequisites","title":"\u2705 Prerequisites","text":"<p>Before you begin:</p> <ul> <li>\ud83d\udc33 Docker and Portainer must be installed and running</li> <li>\ud83c\udf10 Internet access (to pull the DUMB image)</li> <li>\ud83d\udee0\ufe0f Mounted host directories for persistent data storage</li> </ul>"},{"location":"deployment/portainer/#-step-by-step-deployment","title":"\ud83d\udce6 Step-by-Step Deployment","text":""},{"location":"deployment/portainer/#1-log-into-portainer","title":"1. Log into Portainer","text":"<p>Navigate to your Portainer instance (e.g., <code>http://localhost:9000</code>, or <code>https://localhost:9443</code>) and log in.</p>"},{"location":"deployment/portainer/#2-navigate-to-stacks","title":"2. Navigate to Stacks","text":"<p>Click on Stacks in the left sidebar.</p> <p></p>"},{"location":"deployment/portainer/#3-click-add-stack","title":"3. Click \"Add Stack\"","text":"<p>Click the + Add stack button at the top-right.</p> <p></p>"},{"location":"deployment/portainer/#4-configure-the-stack","title":"4. Configure the Stack","text":"<p>Enter the following:</p> <ul> <li>Name: <code>dumb</code></li> <li>Build method: Select <code>Web editor</code></li> <li>Web editor: Paste the DUMB <code>docker-compose</code> content (see below)</li> </ul> <p></p> <p>Important</p> <p>The <code>docker-compose.yml</code> file must be updated to include the correct environment variable values and host paths. For example, replace <code>/home/username/docker</code> with the actual path on your system.</p>"},{"location":"deployment/portainer/#5-deploy-the-stack","title":"5. Deploy the Stack","text":"<p>Click Deploy the stack to launch DUMB.</p> <p></p>"},{"location":"deployment/portainer/#-thats-it","title":"\ud83c\udf89 That\u2019s It!","text":"<p>Once deployed, DUMB will initialize and make its services available at their respective ports (e.g., DUMB Frontend at <code>:3005</code>, API at <code>:8000</code>, etc.).</p> <p>You can now manage DUMB entirely through the DUMB Frontend, or explore the Configuration docs to adjust settings as needed.</p>"},{"location":"deployment/portainer/#-viewing-logs-for-dumb","title":"\ud83d\udcc4 Viewing Logs for DUMB","text":"<p>Once your stack is deployed, you can view logs for the DUMB container:</p> <ol> <li>Navigate to Containers from the left sidebar.</li> <li>Click on the DUMB container name.</li> <li>Go to the Logs tab.</li> <li>Logs will stream live by default. You can scroll or refresh for updates.</li> </ol> <p>This is helpful for debugging service startup or checking configuration issues.</p>"},{"location":"deployment/portainer/#-attach-to-the-container","title":"\ud83d\udd17 Attach to the Container","text":"<p>To view live output or run interactive commands:</p> <ol> <li>From the Containers page, click on the DUMB container.</li> <li>Click the Attach Console button (\u2699\ufe0f icon or from the top bar).</li> <li>Choose a shell (e.g., <code>sh</code>, <code>bash</code>, or <code>/venv/bin/python</code>) and click Connect.</li> </ol> <p>Use this for tasks like inspecting running processes, modifying configs, or testing tools inside the container.</p>"},{"location":"deployment/portainer/#-console-access","title":"\ud83d\udcbb Console Access","text":"<p>You can also use the Console option to access the container shell:</p> <ol> <li>From the Containers tab, click on DUMB.</li> <li>Click the Console tab.</li> <li>Choose the shell you wish to run.</li> <li>Click Connect.</li> </ol> <p>Great for quick inspection or administrative tasks inside the container.</p>"},{"location":"deployment/proxmox/","title":"Deploying on Proxmox","text":""},{"location":"deployment/proxmox/#-deploying-dumb-on-proxmox-lxc-container","title":"\ud83e\uddf1 Deploying DUMB on Proxmox (LXC Container)","text":"<p>This guide will walk you through deploying DUMB inside a lightweight Ubuntu-based LXC container on Proxmox VE.</p>"},{"location":"deployment/proxmox/#-prerequisites","title":"\u2705 Prerequisites","text":"<ul> <li>Proxmox VE installed</li> <li>Internet access on the host</li> <li>Basic knowledge of Proxmox shell and web UI</li> </ul>"},{"location":"deployment/proxmox/#-create-an-ubuntu-lxc-container","title":"\ud83d\udc27 Create an Ubuntu LXC Container","text":"<p>You can automate Ubuntu LXC creation with the following community script:</p> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/ct/ubuntu.sh)\"\n</code></pre> <p>This will download and install an Ubuntu container in Proxmox.</p>"},{"location":"deployment/proxmox/#-lxc-configuration-for-docker--fuse-support","title":"\ud83d\udee0\ufe0f LXC Configuration for Docker + Fuse Support","text":"<p>To ensure DUMB works correctly inside your LXC container (especially with Docker, rclone, and bind mounts), you\u2019ll need to update both the container config, the Proxmox host, and optionally configure persistence across reboots.</p>"},{"location":"deployment/proxmox/#-update-the-lxc-config-file","title":"\ud83d\udd27 Update the LXC Config File","text":"<p><code>&lt;CTID&gt;</code> is the container ID.</p> <ol> <li> <p>Stop the container:</p> <pre><code>pct stop &lt;CTID&gt;\n</code></pre> </li> <li> <p>Edit the container config file:</p> <pre><code>nano /etc/pve/lxc/&lt;CTID&gt;.conf\n</code></pre> </li> <li> <p>Ensure the following lines are present:</p> <pre><code>features: nesting=1\nlxc.cgroup2.devices.allow: a\nlxc.cgroup2.devices.allow: c 10:229 rwm\nlxc.mount.entry: /dev/fuse dev/fuse none bind,create=file\nlxc.mount.entry: /mnt/docker-mounts mnt/docker-mounts none bind,create=dir\nlxc.apparmor.profile: unconfined\n</code></pre> </li> </ol> <p>Note</p> <p>Don't restart the LXC until the below sections have been completed. </p>"},{"location":"deployment/proxmox/#-configure-host-bind-mount","title":"\ud83d\udcc2 Configure Host Bind Mount","text":"<ol> <li> <p>On the Proxmox host, create the mount target and bind it:</p> <pre><code>mkdir -p /mnt/docker-mounts\nmount --bind /mnt/docker-mounts /mnt/docker-mounts\nmount --make-rshared /mnt/docker-mounts\n</code></pre> </li> </ol>"},{"location":"deployment/proxmox/#-make-the-mount-persistent-recommended","title":"\ud83d\udcbe Make the Mount Persistent (Recommended)","text":"<p>This ensures the bind mount is restored after reboots.</p>"},{"location":"deployment/proxmox/#option-a-use-etcfstab-and-manually-set-the-mount-propagation-after-reboot","title":"Option A: Use <code>/etc/fstab</code> and manually set the mount propagation after reboot","text":"<ol> <li> <p>Open the file:</p> <pre><code>nano /etc/fstab\n</code></pre> </li> <li> <p>Add this line at the bottom:</p> <pre><code>/mnt/docker-mounts /mnt/docker-mounts none bind 0 0\n</code></pre> </li> <li> <p>After a reboot, paste the following </p> <pre><code>mount --make-rshared /mnt/docker-mounts\n</code></pre> </li> </ol>"},{"location":"deployment/proxmox/#option-b-automate-rshared-with-systemd-optional-but-recommended","title":"Option B: Automate <code>rshared</code> with <code>systemd</code> (Optional, but recommended)","text":"<p>This ensures the bind mount propagation is set after reboots.</p> <p>To persist the <code>rshared</code> behavior across boots:</p> <ol> <li> <p>Create a new service file:</p> <pre><code>nano /etc/systemd/system/mnt-docker-mounts-rshared.service\n</code></pre> </li> <li> <p>Paste the following:</p> <pre><code>[Unit]\nDescription=Make /mnt/docker-mounts rshared\nAfter=local-fs.target\nRequiresMountsFor=/mnt/docker-mounts\n\n[Service]\nType=oneshot\nExecStart=/bin/mount --make-rshared /mnt/docker-mounts\nRemainAfterExit=true\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Reload systemd and enable the service:</p> <pre><code>systemctl daemon-reexec\nsystemctl enable --now mnt-docker-mounts-rshared.service\n</code></pre> </li> </ol>"},{"location":"deployment/proxmox/#-add-and-configure-a-user-inside-the-lxc-required","title":"\ud83d\udc64 Add and Configure a User inside the LXC (Required)","text":"<p>DUMB must be ran as any user other than root</p> <ol> <li> <p>Start/Restart the container:</p> <pre><code>pct start &lt;CTID&gt;\n</code></pre> <p><code>systemctl restart pve-container@&lt;CTID&gt;</code> may need to be used for changes to apply</p> </li> <li> <p>If not already created in the LXC, add a user (<code>ubuntu</code>) and configure passwordless sudo:</p> <pre><code>adduser ubuntu\nusermod -aG sudo ubuntu\n</code></pre> </li> <li> <p>Enable passwordless sudo (Optional):     <pre><code>echo \"ubuntu ALL=(ALL) NOPASSWD:ALL\" &gt; /etc/sudoers.d/ubuntu\nchmod 440 /etc/sudoers.d/ubuntu\n</code></pre></p> <p>Tip</p> <p>To find the UID and GID (needed for <code>PUID</code> and <code>PGID</code> in your DUMB config): <pre><code>id ubuntu\n</code></pre></p> <p>Example output: <pre><code>uid=1000(ubuntu) gid=1000(ubuntu)\n</code></pre></p> <p>Use these values in your <code>dumb_config.json</code> or docker-compose: <pre><code>\"puid\": 1000,\n\"pgid\": 1000,\n</code></pre></p> </li> </ol>"},{"location":"deployment/proxmox/#-define-the-directory-structure-inside-the-lxc","title":"\ud83d\udcc1 Define the Directory Structure inside the LXC","text":"<p>Note</p> <p>If you already have a directory structure you'd like to use, then you can skip this step.</p> <ol> <li> <p>Switch to the <code>ubuntu</code> user:</p> <pre><code>su ubuntu\n</code></pre> </li> <li> <p>Create a directory for docker in your user directory and change directories to docker.     <pre><code>cd ~ &amp;&amp; mkdir docker &amp;&amp; cd docker\n</code></pre></p> </li> <li> <p>Create the DUMB directories.     <pre><code>mkdir -p DUMB/config DUMB/log DUMB/Zurg/RD DUMB/Riven/data DUMB/Riven/mnt DUMB/PostgreSQL/data DUMB/pgAdmin4/data DUMB/Zilean/data\n</code></pre></p> </li> </ol>"},{"location":"deployment/proxmox/#-install-docker-inside-the-lxc","title":"\ud83d\udc33 Install Docker inside the LXC","text":"<ol> <li> <p>Run the official Docker install script:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n</code></pre> </li> <li> <p>After installing Docker, verify it:     <pre><code>docker --version\ndocker compose version\n</code></pre></p> </li> <li> <p>Add your user to the docker group:     <pre><code>sudo groupadd docker\nsudo usermod -aG docker $USER\n</code></pre></p> </li> </ol>"},{"location":"deployment/proxmox/#-install-portainer-inside-the-lxc-optional","title":"\ud83d\udea2 Install Portainer inside the LXC (Optional)","text":"<p>If you want to manage Docker visually via Portainer:</p> <ol> <li> <p>Create the Portainer data volume:     <pre><code>docker volume create portainer_data\n</code></pre></p> </li> <li> <p>Start the Portainer container:</p> <pre><code>docker run -d \\\n-p 8000:8000 \\\n-p 9443:9443 \\\n--name portainer \\\n--restart=always \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v portainer_data:/data \\\nportainer/portainer-ce:latest\n</code></pre> </li> </ol> <p>You can now manage Docker containers via the browser at: <code>https://&lt;ip&gt;:9443</code></p> <p>Note</p> <p>On the first run of Portainer, you need to access the Web UI quickly to create your initial administrator user, which is crucial for accessing and managing your Docker environment. </p> <p>Tip</p> <p>If you can't access the UI after the initial setup, ensure the Portainer container is running and that the correct port is open.  You might need to restart the container if it timed out. </p> <p>For more, see the Portainer Deployment Guide.</p>"},{"location":"deployment/proxmox/#-update-docker-bind-mount-important","title":"\ud83d\udc33 Update Docker Bind Mount (Important)","text":"<p>When launching DUMB or your media server, make sure the following mount is used:</p> <p>Replace: <pre><code>- /home/username/docker/DUMB/Zurg/mnt:/data:shared\n</code></pre></p> <p>With: <pre><code>- /mnt/docker-mounts:/data:rshared\n</code></pre></p> <p>This ensures proper visibility between <code>zurg</code>, <code>rclone</code>, and your media server inside the LXC container.</p>"},{"location":"deployment/proxmox/#-next-steps","title":"\ud83d\ude80 Next Steps","text":"<p>Now that Docker (and optionally Portainer) are installed, continue with:</p> <ul> <li>Deploy DUMB via Docker Compose</li> <li>Configure your stack with Portainer</li> </ul>"},{"location":"deployment/unraid/","title":"unRAID Deployment","text":""},{"location":"deployment/unraid/#-deploying-dumb-on-unraid","title":"\ud83e\uddf1 Deploying DUMB on unRAID","text":"<p>This guide will walk you through deploying Debrid Unlimited Media Bridge (DUMB) on unRAID using the Community Applications plugin and Docker.</p>"},{"location":"deployment/unraid/#-prerequisites","title":"\u2705 Prerequisites","text":"<p>Before proceeding, ensure you have the following:</p> <ul> <li>A running unRAID server with Docker enabled.</li> <li>The Community Applications plugin installed.</li> <li>At least one unRAID share for persistent storage (e.g., <code>/mnt/user/appdata/DUMB</code>).</li> <li>An understanding of basic Docker container and volume mapping in unRAID.</li> </ul> <p>Optional but recommended:</p> <ul> <li>Installed media server such as Plex, Jellyfin, or Emby.</li> <li>A valid Plex Token (if using Plex integration).</li> </ul>"},{"location":"deployment/unraid/#-quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"deployment/unraid/#1-install-the-dumb-template","title":"1. Install the DUMB Template","text":"<ul> <li>Navigate to the Apps tab in unRAID.</li> <li>Search for <code>DUMB</code> and select the Debrid Unlimited Media Bridge template.</li> <li>Click Install.</li> </ul>"},{"location":"deployment/unraid/#2-path-and-variable-configuration","title":"2. Path and Variable Configuration","text":"<p>Ensure your paths and environment variables are set correctly: - Mount all relevant paths (e.g., <code>/mnt</code>, <code>/config</code>, <code>/cache</code>) to valid unRAID shares. - Set your <code>PUID</code> to <code>99</code> and <code>PGID</code> to <code>100</code> (used for <code>nobody:users</code> on unRAID). - Set your timezone (<code>TZ</code>) appropriately (e.g., <code>America/New_York</code>).</p>"},{"location":"deployment/unraid/#3-fix-permissions-first-time-only","title":"3. Fix Permissions (First-Time Only)","text":"<p>Docker on unRAID may create directories as <code>root</code>, causing permission issues. Fix this using the following method:</p>"},{"location":"deployment/unraid/#terminal-method","title":"Terminal Method:","text":"<pre><code>chown -R 99:100 /mnt/user/appdata/DUMB\n</code></pre>"},{"location":"deployment/unraid/#webui-method","title":"WebUI Method:","text":"<ol> <li>Go to Shares &gt; locate your DUMB share.</li> <li>Click the <code>+</code> to expand.</li> <li>Under Owner, set to <code>nobody</code> (user ID 99).</li> </ol>"},{"location":"deployment/unraid/#4-start-the-container","title":"4. Start the Container","text":"<ul> <li>Click Start in the Docker tab.</li> <li>Open the Logs tab to confirm successful startup.</li> <li>Look for a confirmation message that <code>riven frontend</code> has started.</li> </ul>"},{"location":"deployment/unraid/#-matching-paths-in-plex-jellyfin-emby","title":"\ud83d\udd01 Matching Paths in Plex, Jellyfin, Emby","text":"<p>Your Media Server (Plex, Jellyfin, or Emby) must have the same paths as DUMB:</p> <ul> <li>DUMB mounts:</li> <li><code>/mnt</code> (contains both Riven and Zurg content)</li> <li>In your media server:</li> <li>Mount <code>/mnt</code> to <code>/mnt</code> as well.</li> <li>Only add the Riven path (e.g., <code>/mnt/movies</code>, <code>/mnt/shows</code>) as libraries.</li> </ul> <p>\u26a0\ufe0f Do NOT add <code>/data</code> or Zurg\u2019s full rclone mount as libraries. Use only the Riven symlinked content.</p>"},{"location":"deployment/unraid/#-example-screenshots","title":"\ud83d\udcf7 Example Screenshots","text":"<ul> <li>DUMB Docker setup:</li> </ul> <ul> <li>Plex Docker container setup:</li> </ul> <ul> <li>Plex UI Library paths:</li> </ul>"},{"location":"deployment/unraid/#-additional-configuration","title":"\ud83d\udee0\ufe0f Additional Configuration","text":""},{"location":"deployment/unraid/#-plex-token-setup","title":"\ud83d\udcfa Plex Token Setup","text":"<p>To enable features like watchlist syncing, you may need your Plex token:</p> <ol> <li>Visit <code>https://plex.tv</code>, login.</li> <li>Open any item &gt; click the 3 dots &gt; View XML.</li> <li>At the end of the URL, copy the value after <code>Plex-Token=</code>.</li> </ol>"},{"location":"deployment/unraid/#-advanced-tools","title":"\ud83e\udde0 Advanced Tools","text":"<p>To troubleshoot permissions or inspect mounts: <pre><code>docker exec -w /mnt/movies dumb ls -Rl\n</code></pre> To enter the container interactively: <pre><code>docker exec -it dumb sh\n</code></pre> Install Midnight Commander (optional): <pre><code>apk add mc &amp;&amp; mc\n</code></pre></p>"},{"location":"deployment/unraid/#-jellyfin-and-emby-notes","title":"\ud83e\uddea Jellyfin and Emby Notes","text":"<p>Both Jellyfin and Emby can work with DUMB:</p> <ul> <li>Map <code>/mnt</code> into the containers.</li> <li>Add only the Riven subpaths (<code>/mnt/movies</code>, <code>/mnt/shows</code>) as libraries.</li> </ul>"},{"location":"deployment/unraid/#-troubleshooting","title":"\ud83e\uddf0 Troubleshooting","text":"<ul> <li>Check logs via Docker tab &gt; select DUMB &gt; Logs.</li> <li>Use <code>docker exec</code> or Midnight Commander to inspect file/folder structure.</li> <li>Common issues:</li> <li>Wrong <code>PUID/PGID</code></li> <li>Paths not matching between DUMB and your media server</li> <li>Invalid Plex token</li> </ul>"},{"location":"deployment/wsl/","title":"Deploy with WSL","text":""},{"location":"deployment/wsl/#-deploying-dumb-on-windows-setup-guide-dockerwsl","title":"\ud83d\udda5\ufe0f Deploying DUMB on Windows Setup Guide (Docker/WSL)","text":"<p>Docker Desktop</p> <p>Ensure that Docker Desktop is not installed; if so, uninstall and reboot before proceeding.</p> <p>This guide will walk you through setting up DUMB on a Windows system using a lightweight Docker + WSL2 setup, without relying on Docker Desktop. </p>"},{"location":"deployment/wsl/#-wsl-install","title":"\ud83d\udc27 WSL Install","text":"<ol> <li> <p>From the Microsoft Store, install Windows Subsystem for Linux (WSL)</p> </li> <li> <p>From the Microsoft Store, install Ubuntu 22.04 LTS</p> </li> <li> <p>Follow the setup to create your Ubuntu username and password</p> </li> <li> <p>From a Windows Command Prompt, paste the following:</p> <pre><code>cd C:\\WINDOWS\\system32\n</code></pre> </li> <li> <p>Then set Ubuntu 22.04 as the default distro:</p> <pre><code>wsl --setdefault Ubuntu-22.04\n</code></pre> </li> <li> <p>From the Windows app menu, start Ubuntu 22.04, then paste the following inside the terminal:</p> <p>Note</p> <p>This step is only required if sharing the mount outside of the container - e.g., to another media server, etc. </p> <pre><code>sudo apt update\nsudo apt upgrade -y\nsudo mount --make-rshared /\n</code></pre> <p>Note</p> <p><code>sudo mount --make-rshared /</code> does not persist after reboots. You\u2019ll need to run it each time WSL2 or Windows is restarted.  </p> <p>Alternatively, see the Ubuntu systemd service guide to automate this at startup.</p> </li> </ol>"},{"location":"deployment/wsl/#-docker-install","title":"\ud83d\udc33 Docker Install","text":"<ol> <li> <p>Follow the official Docker Engine install guide for Ubuntu</p> </li> <li> <p>Once Docker is installed, you can either:</p> <ul> <li>Use the standard Docker CLI to create the container</li> <li>Or follow the Docker Deployment or Portainer Deployment guides for predefined setups</li> </ul> </li> </ol>"},{"location":"deployment/wsl/#-accessing-the-mount-on-windows","title":"\ud83d\udcc2 Accessing the Mount on Windows","text":"<p>Note</p> <p>These steps are only required if sharing the mount outside of the container - e.g., to another media server, etc. </p> <ol> <li> <p>From the Ubuntu terminal, open File Explorer in the current directory:</p> <pre><code>explorer.exe .\n</code></pre> </li> <li> <p>A new File Explorer window will appear \u2014 you\u2019re now inside the Ubuntu file system</p> </li> <li> <p>Navigate to the mount location and copy the full path from the Explorer address bar</p> </li> <li> <p>In another File Explorer window:</p> <ul> <li>Click This PC</li> <li>Right-click in the blank space and select Add a network location</li> </ul> </li> <li> <p>In the popup:</p> <ul> <li>Click Next twice</li> <li>Paste the WSL path you copied</li> </ul> </li> <li> <p>Complete the remaining prompts to finalize the mount</p> </li> </ol>"},{"location":"deployment/wsl/#-mirrored-mode-networking","title":"\ud83c\udf10 Mirrored Mode Networking","text":"<p>Starting with Windows 11 22H2, WSL2 supports a new networking mode called mirrored networking, which improves compatibility and unlocks several new features by mirroring Windows' network interfaces into Linux.</p>"},{"location":"deployment/wsl/#-benefits-of-mirrored-networking","title":"\u2705 Benefits of Mirrored Networking","text":"<ul> <li>\ud83e\udded Full IPv6 support  </li> <li>\ud83d\udd01 Access Windows services from WSL using <code>127.0.0.1</code> </li> <li>\ud83d\udd12 Improved VPN support (VPNs work in both Windows and WSL)  </li> <li>\ud83d\udce1 Multicast compatibility  </li> <li>\ud83e\uddf7 Reach WSL directly from your local LAN</li> </ul>"},{"location":"deployment/wsl/#-enabling-mirrored-mode","title":"\ud83d\udd27 Enabling Mirrored Mode","text":"<ol> <li> <p>Open (or create) the <code>.wslconfig</code> file in your Windows home directory:</p> <pre><code>notepad $env:USERPROFILE\\.wslconfig\n</code></pre> </li> <li> <p>Add the following section:</p> <pre><code>[wsl2]\nnetworkingMode=mirrored\n</code></pre> </li> <li> <p>Restart WSL for the changes to take effect:</p> <pre><code>wsl --shutdown\n</code></pre> <p>Then restart your distro from the Windows menu or run:</p> <pre><code>wsl\n</code></pre> </li> </ol>"},{"location":"deployment/wsl/#-additional-notes","title":"\ud83d\udccc Additional Notes","text":"<ul> <li>You can combine this with <code>autoProxy=true</code> if you're using a proxy.</li> <li>This setting applies globally across all WSL2 instances.</li> </ul>"},{"location":"deployment/wsl/#-extra-credit","title":"\ud83c\udf1f Extra Credit","text":"<p>If you want to manage Docker visually via Portainer:</p> <ol> <li> <p>Create the Portainer data volume:     <pre><code>docker volume create portainer_data\n</code></pre></p> </li> <li> <p>Start the Portainer container:</p> <pre><code>docker run -d \\\n-p 8000:8000 \\\n-p 9443:9443 \\\n--name portainer \\\n--restart=always \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v portainer_data:/data \\\nportainer/portainer-ce:latest\n</code></pre> </li> </ol> <p>You can now manage Docker containers via the browser at: <code>https://&lt;ip&gt;:9443</code></p> <p>Note</p> <p>On the first run of Portainer, you need to access the Web UI quickly to create your initial administrator user, which is crucial for accessing and managing your Docker environment. </p> <p>Tip</p> <p>If you can't access the UI after the initial setup, ensure the Portainer container is running and that the correct port is open.  You might need to restart the container if it timed out. </p> <p>For more, see the Portainer Deployment Guide.</p> <p>Now you\u2019re ready to run DUMB inside WSL2 with full Docker support \u2014 no Docker Desktop required!</p>"},{"location":"faq/dumb/","title":"DUMB FAQ","text":"<p>Below are some common questions and solutions related to DUMB.</p>"},{"location":"faq/dumb/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/dumb/#does-the-dumb-image-have-the-latest-version-of-x","title":"Does the DUMB image have the latest version of <code>x</code>","text":"<p>The GitHub repo for DUMB use many continuous integration and continuous deployment (CI/CD) workflows to ensure proper building, reporting, and updating of the images.</p> <p>For example, the Check for New Release Tags workflow is automated to run every three hours and check for updates to the various services/projects utilized in DUMB. If an update is found, the Docker Image CI workflow is called to build a new image with the latest services. </p>"},{"location":"faq/dumb/#what-versions-are-in-the-latest-dumb-image","title":"What versions are in the latest DUMB image","text":"<p>Similar to the above question, and the answer is usually the latest; however, if there has been a recent release and the Check for New Release Tags workflow has not run yet, then there my be disparity. </p> <p>To check, click on one of the Docker Image CI jobs to see the <code>Build Summary</code></p> <p>Example <code>Build Summary</code> below: </p>"},{"location":"faq/general/","title":"General FAQ","text":"<p>Below are some common questions and solutions related to DUMB that apply across multiple services or the platform as a whole.</p>"},{"location":"faq/general/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/general/#-will-dumb-use-a-lot-of-storage-space","title":"\ud83d\udcbe Will DUMB use a lot of storage space?","text":"<p>That depends on how you configure it. Most services (like Zurg and Rclone) operate by streaming content from the debrid service, so very little is permanently stored on your local system \u2014 unless you're using <code>rclone</code> with VFS caching enabled.</p> <p>If you're using VFS cache (recommended for Plex), ensure that the cache size is managed appropriately. See the rclone configuration for more.</p>"},{"location":"faq/general/#-do-i-need-to-install-every-service","title":"\ud83e\uddf1 Do I need to install every service?","text":"<p>No \u2014 DUMB is modular. You can enable or disable services in <code>dumb_config.json</code> under each service section. Some core services (like <code>riven_backend</code>, <code>cli_debrid</code>, etc.) provide core functionality and have required dependent services (like <code>zurg</code>, <code>rclone</code>, <code>postgres</code>, etc.), but others (like <code>pgadmin</code>) are optional service tools to help you manage your setup.</p>"},{"location":"faq/general/#-can-i-run-dumb-offline","title":"\ud83c\udf0d Can I run DUMB offline?","text":"<p>Most DUMB services interact with external APIs (e.g., Real-Debrid, Plex, Trakt, TMDB, etc.), so internet access is required for normal operation. However, local database tools (e.g., pgAdmin) and UIs may still function offline for inspection.</p>"},{"location":"faq/general/#-what-happens-when-i-update-dumb","title":"\ud83d\udd04 What happens when I update DUMB?","text":"<p>The image maintained for DUMB is automatically updated when one of the embedded services (like <code>riven_backend</code>, <code>cli_debrid</code>, etc.) have a new release available; thus, reducing the need to update to the latest release inside the container. For more info, see the DUMB FAQ regarding finding what versions are built into the image. </p> <p>Alternatively, DUMB also includes auto-update functionality for most services. Depending on your configuration (<code>auto_update</code> and <code>auto_update_interval</code>), the system will check for new versions of services like Zurg, Riven, Zilean, etc.</p> <p>You can configure update frequency and behavior in each service\u2019s section of <code>dumb_config.json</code>.</p>"},{"location":"faq/general/#-is-dumb-secure","title":"\ud83d\udd12 Is DUMB secure?","text":"<p>DUMB is intended to run on your local or private server. Most services are, by default, bound to <code>127.0.0.1</code> and not exposed publicly unless explicitly configured by exposing ports in the Docker compose or changing the bound address.</p> <p>Most of the web-based UIs and APIs lack any form of authentication. </p> <p>If you're exposing services externally (e.g., via Traefik or NGINX), consider using authentication layers like OAuth2, HTTPS, and firewalls.</p>"},{"location":"faq/general/#-can-i-use-my-own-custom-version-of-a-service","title":"\ud83d\udee0\ufe0f Can I use my own custom version of a service?","text":"<p>Yes \u2014 you can point most services to a custom branch or fork by editing the <code>repo_owner</code>, <code>repo_name</code>, <code>branch</code>, or <code>release_version</code> in its config section in <code>dumb_config.json</code>. This is especially useful if you are testing development builds or your own patches.</p>"},{"location":"faq/general/#-can-i-back-up-my-dumb-setup","title":"\ud83d\udce6 Can I back up my DUMB setup?","text":"<p>Absolutely. The most important files to back up are:</p> <ul> <li><code>dumb_config.json</code></li> <li>Any data directories (e.g., <code>/riven/backend/data</code>, <code>/zilean/app/data</code>, <code>/pgadmin/data</code>, <code>postgres_data</code>, <code>plex</code>, etc)</li> </ul> <p>Regularly backing these up allows you to quickly restore your environment.</p> <p>Exclude mounted paths from your backup</p> <p>Be sure to exclude any mounted paths (e.g., /mnt/debrid) when backing up.  Otherwise, you\u2019ll unintentionally download and archive the entire contents of your debrid services, which can be massive and unnecessary.</p> <p>Don\u2019t believe me? Just ask Mr. Krabs.</p>"},{"location":"faq/general/#-can-i-monitor-the-system","title":"\ud83d\udcc8 Can I monitor the system?","text":"<p>Yes \u2014 the DUMB Frontend shows real-time logs, service logs, service status, and allows interactive config management. You can also access logs from the filesystem or via the DUMB API (see API docs).</p>"},{"location":"faq/general/#-whats-the-difference-between-using-rclonezurg-mounts-vs-symlinks-riven-cli-debrid-decypharr-etc-in-my-media-server","title":"\ud83d\udd17 What\u2019s the difference between using rclone/Zurg mounts vs. symlinks (Riven, CLI Debrid, Decypharr, etc.) in my media server?","text":"<p>DUMB supports two methods of exposing content to your media server, each with its own use case:</p>"},{"location":"faq/general/#1-direct-mount-zurgrclone","title":"1. Direct Mount (Zurg/rclone)","text":"<p>Mounting the WebDAV or remote storage directly using <code>rclone</code> (which often connects to a Zurg instance) gives you full access to all files in your debrid account.</p> <p>\u2705 Pros:</p> <ul> <li>Access to all debrid content, including content not added by Riven</li> <li>Instant visibility of new files from your debrid service</li> <li>Useful for manual browsing or catching content missed by automation</li> <li>Allows content orchestration with Debrid Media Manager (DMM)</li> <li>Less complexity when sharing mounts across the host or network</li> </ul> <p>\u26a0\ufe0f Cons:</p> <ul> <li>File/folder naming is often inconsistent or messy</li> <li>Can lead to Plex/Emby/Jellyfin misidentification</li> <li>Media scanners may perform poorly due to large, unorganized libraries</li> </ul>"},{"location":"faq/general/#2-symlinked-mount-via-riven-as-an-example","title":"2. Symlinked Mount (via Riven as an example)","text":"<p>Riven creates cleanly named symlinks pointing to content in the underlying Zurg/rclone mount (usually in a shared directory like <code>/mnt/debrid/riven</code>). </p> <p>These symlinks are stored in a separate directory (like <code>/mnt/debrid/riven_symlinks</code>) and represent only curated content Riven has identified and processed.</p> <p>\u2705 Pros:</p> <ul> <li>Only includes content that\u2019s been properly scraped and sorted</li> <li>Directory structure and filenames are optimized for media servers</li> <li>More accurate library scans and faster detection</li> <li>Ideal for fully automated Plex/Emby/Jellyfin setups</li> </ul> <p>\u26a0\ufe0f Cons:</p> <ul> <li>Only includes what Riven has processed \u2014 not your full debrid library</li> <li>Requires Riven to stay running and correctly configured</li> <li>If Riven settings are misconfigured, some content may not appear</li> <li>If Riven's database is lost or reset, all content must be scraped and added again</li> <li>Symlinks add complexity by requiring your media server to share the same exact container paths as defined in DUMB's <code>dumb_config.json</code> \u2014 e.g., <code>/mnt/debrid</code> must exist exactly the same inside your media server container or on the host when the media server is not containerized  </li> </ul>"},{"location":"faq/general/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Configuration Guide</li> <li>Service Overview</li> <li>DUMB Frontend</li> <li>Deployment</li> </ul>"},{"location":"faq/pgadmin/","title":"pgAdmin FAQ","text":"<p>Below are common questions and helpful usage tips for working with pgAdmin in DUMB.</p>"},{"location":"faq/pgadmin/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/pgadmin/#what-is-pgadmin-used-for-in-dumb","title":"What is pgAdmin used for in DUMB?","text":"<p>pgAdmin is a web-based GUI for managing PostgreSQL. In the context of DUMB, it connects to the PostgreSQL instance used by services like Riven and Zilean.</p> <p>You can use it to:</p> <ul> <li>Explore and modify database tables and data</li> <li>Run SQL queries manually using the Query Tool</li> <li>Schedule tasks using pgAgent (optional tool inside pgAdmin)</li> <li>View the System Stats inside PostgreSQL</li> </ul>"},{"location":"faq/pgadmin/#-using-pgadmins-query-tool","title":"\ud83e\uddea Using pgAdmin\u2019s Query Tool","text":"<p>To run manual queries (e.g., inspecting or modifying blacklist entries):</p> <ol> <li>Navigate to the \"Databases\" list in the left sidebar.</li> <li>Right-click the <code>riven</code> or <code>zilean</code> database.</li> <li>Select Query Tool.</li> <li>Paste your SQL query in the top panel and run it.</li> </ol>"},{"location":"faq/pgadmin/#-example-view--clear-rivens-stream-blacklist","title":"\ud83d\udd04 Example: View &amp; Clear Riven's Stream Blacklist","text":"<pre><code>SELECT id, media_item_id, stream_id FROM \"StreamBlacklistRelation\";\nDELETE FROM \"StreamBlacklistRelation\";\n</code></pre> <p>To just view the count:</p> <pre><code>SELECT COUNT(*) FROM \"StreamBlacklistRelation\";\n</code></pre> <p></p>"},{"location":"faq/pgadmin/#-save-queries-for-later","title":"\ud83d\udcbe Save Queries for Later","text":"<p>Click Save As in the Query Tool to store frequently used queries as <code>.sql</code> files.</p> <p></p>"},{"location":"faq/pgadmin/#-drop-a-database-or-create-a-manual-backup-in-pgadmin","title":"\ud83e\uddf9 Drop a Database or Create a Manual Backup in pgAdmin","text":""},{"location":"faq/pgadmin/#-drop-a-database","title":"\ud83d\uddd1\ufe0f Drop a Database","text":"<p>You can delete a database from within pgAdmin if you no longer need it (e.g., to reset Riven or Zilean).</p> <ol> <li>In the Object Browser, expand the Databases section.</li> <li>Right-click the target database (e.g., <code>riven</code> or <code>zilean</code>).</li> <li>Select Delete/Drop.</li> <li>Confirm when prompted.</li> </ol> <p>Warning</p> <p>This will permanently remove the database and all its data. Ensure you\u2019ve backed up anything you want to keep before proceeding.</p>"},{"location":"faq/pgadmin/#-manually-create-a-database-backup","title":"\ud83d\udcbe Manually Create a Database Backup","text":"<p>To create a backup of any database using the pgAdmin interface:</p> <ol> <li>In the Object Browser, right-click the desired database.</li> <li>Choose Backup.</li> <li> <p>In the dialog:</p> <ul> <li>Format: Select <code>Custom</code> to enable full database restore capability.</li> <li>Filename: Save to <code>/pgadmin/data/your_backup_name.backup</code> or <code>.sql</code>.</li> </ul> </li> <li> <p>Ensure Dump Options #1 is configured with:</p> <ul> <li><code>Include CREATE DATABASE statement</code> enabled (for standalone restoration)</li> <li><code>Only data</code> and <code>Only schema</code> unchecked (you want both schema and data)</li> </ul> </li> <li> <p>Under Dump Options #2, verify or set advanced filters if needed.</p> </li> <li> <p>Click Backup to start the process.</p> </li> </ol>"},{"location":"faq/pgadmin/#-backup-vs-sql","title":"\ud83d\uddc2\ufe0f .backup vs .sql","text":"<ul> <li> <p><code>.backup</code> (Custom Format)</p> <ul> <li>Recommended for complete backups</li> <li>Supports compression, selective restore, and full restore via pgAdmin or <code>pg_restore</code></li> <li>Not human-readable but ideal for production-grade backups</li> </ul> </li> <li> <p><code>.sql</code> (Plain Format)</p> <ul> <li>Outputs all SQL commands as text</li> <li>Human-readable and easy to inspect or modify manually</li> <li>Can be restored via <code>psql</code>, but lacks compression and selective restoration features</li> </ul> </li> </ul> <p>For a reliable, restorable snapshot of your database, always choose <code>.backup</code> with Custom format.</p> <p>For more advanced backup configuration and explanation of options, see the pgAdmin Backup Dialog Documentation.</p>"},{"location":"faq/pgadmin/#-optional-use-pgagent-to-schedule-tasks","title":"\u23f1\ufe0f Optional: Use pgAgent to Schedule Tasks","text":"<p>pgAdmin comes with pgAgent, which lets you create recurring jobs.</p> <p>This is entirely optional and not required to use DUMB.</p>"},{"location":"faq/pgadmin/#-example-scheduled-backups-with-pgagent","title":"\ud83d\udcbe Example: Scheduled Backups with pgAgent","text":"<ol> <li>Navigate to <code>pgAgent Jobs</code> under your connected DUMB server.</li> <li> <p>Right-click \u2192 <code>Create \u2192 pgAgent Job</code></p> <p></p> </li> <li> <p>Enter the job name and any comments.</p> <p></p> </li> <li> <p>Go to the Steps tab and click the <code>+</code> button to Add row.</p> </li> <li> <p>Edit the new row to configure a backup step.</p> <p></p> </li> <li> <p>Enter a step name, set <code>Kind</code> = <code>Batch</code>, and paste your backup command in the Code tab:</p> <pre><code>pg_dump --username=DUMB --dbname=riven --clean --file=/pgadmin/data/riven_backup-`date +%Y-%m-%d-%H-%M-%S`.sql\npg_dump --username=DUMB --dbname=zilean --clean --file=/pgadmin/data/zilean_backup-`date +%Y-%m-%d-%H-%M-%S`.sql\n</code></pre> <p></p> </li> <li> <p>Go to the Schedules tab to define when the backup should run.</p> <p></p> </li> <li> <p>On the Repeat tab, set a repeat interval like daily at midnight.</p> <p></p> </li> <li> <p>Save your pgAgent job.</p> </li> </ol> <p>Backups are saved in <code>/pgadmin/data</code> by default.</p>"},{"location":"faq/pgadmin/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>PostgreSQL FAQ</li> <li>Zilean</li> <li>Riven Backend</li> </ul>"},{"location":"faq/plex/","title":"Plex FAQ","text":"<p>Below are some common questions and solutions related to when using Plex alongside DUMB with services like Zurg and Rclone.</p>"},{"location":"faq/plex/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/plex/#-recommended-library-settings","title":"\u2699\ufe0f Recommended Library Settings","text":"<p>To reduce the risk of excessive API calls to Real-Debrid (which can result in <code>423 Locked</code> errors or rate limits), the following Plex library settings should be disabled for each media library:</p>"},{"location":"faq/plex/#library-settings-per-library","title":"Library Settings (Per Library):","text":"<ul> <li>Video Preview Thumbnails</li> <li>Credits Detection</li> <li>Voice Detection</li> <li>Empty trash automatically after every scan (this can trigger deletions unnecessarily when using symlinked content)</li> </ul>"},{"location":"faq/plex/#global-settings-settings--library","title":"Global Settings (Settings &gt; Library):","text":"<ul> <li>Scan my library automatically</li> <li>Run a partial scan when changes are detected</li> </ul> <p>These settings reduce the number of filesystem scans Plex performs, which can otherwise generate a high number of requests to mounted Real-Debrid content.</p>"},{"location":"faq/plex/#-plex-buffers-a-lot-when-playing-content-mounted-via-rclone","title":"\u26a0\ufe0f Plex buffers a lot when playing content mounted via rclone","text":"<p>This is often caused by the lack of caching when streaming large files from cloud-mounted storage.</p>"},{"location":"faq/plex/#-recommended-solution","title":"\u2705 Recommended Solution","text":"<p>Enable VFS (Virtual File System) cache in your <code>rclone</code> configuration.</p> <p>When using DUMB, set the following environment variables: <pre><code>RCLONE_VFS_CACHE_MODE=full\nRCLONE_VFS_CACHE_MAX_SIZE=100G\nRCLONE_VFS_CACHE_MAX_AGE=6h\n</code></pre></p> <p>These flags ensure that: - The full file is cached locally before playback. - Plex can smoothly read data without constant remote fetches.</p> <p>See rclone docs or refer to rclone Flags via Environment Variables for examples and formatting guidance.</p>"},{"location":"faq/plex/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Zurg FAQ</li> <li>Rclone Configuration</li> </ul>"},{"location":"faq/postgres/","title":"PostgreSQL FAQ","text":"<p>Below are common questions and explanations related to PostgreSQL, which is the primary database engine used by DUMB.</p>"},{"location":"faq/postgres/#-how-postgresql-is-used-in-dumb","title":"\ud83d\uddc3\ufe0f How PostgreSQL is used in DUMB","text":"<p>PostgreSQL is used to store persistent data for the following services:</p> <ul> <li>Riven Backend \u2013 stores indexed content, metadata, scraped results, job states, and user settings.</li> <li>Zilean \u2013 stores hash lookups, metadata cache, and processing history.</li> </ul> <p>Each service has its own database, created automatically when DUMB starts:</p> Service Database Name Riven <code>riven</code> Zilean <code>zilean</code> pgAdmin (optional) <code>pgadmin</code> <p>The database storage path is configured using the <code>postgres_data</code> path in <code>dumb_config.json</code>, defaulting to <code>/postgres_data</code>.</p>"},{"location":"faq/postgres/#-what-happens-if-i-delete-the-database","title":"\u2757 What happens if I delete the database?","text":"<p>If the PostgreSQL volume or <code>/postgres_data</code> directory is deleted, all data for Riven and Zilean will be lost.</p> <p>This includes:</p> <ul> <li>Indexed or scraped content in Riven</li> <li>Cached metadata and hashes in Zilean</li> <li>Any custom settings stored in the database</li> </ul> <p>Both services will start fresh and reinitialize their databases upon next launch.</p> <p>Accidental deletion of <code>postgres_data</code> is not recoverable</p> <p>Make sure to regularly back up your <code>postgres_data</code> directory if long-term retention is important.</p> <p>See the pgAdmin service for details on scheduling backups of the PostgreSQL databases. </p>"},{"location":"faq/postgres/#-can-i-reset-the-database-intentionally","title":"\ud83d\udd01 Can I reset the database intentionally?","text":"<p>Yes \u2014 stopping the stack, deleting the <code>postgres_data</code> directory, and starting again will reset everything.</p> <p>Alternatively, use pgAdmin 4 (if enabled) to drop individual databases manually.</p> <p>See the PostgreSQL Useful Commands section.</p> <p>Alternatively, See the pgAdmin FAQ section.</p>"},{"location":"faq/postgres/#-what-are-the-default-credentials","title":"\ud83d\udd10 What are the default credentials?","text":"<ul> <li>Username: <code>DUMB</code></li> <li>Password: <code>postgres</code></li> <li>Port: <code>5432</code></li> <li>These values can be customized in the <code>postgres</code> section of <code>dumb_config.json</code>.</li> </ul>"},{"location":"faq/postgres/#-can-i-connect-to-postgresql-externally","title":"\ud83d\udcbb Can I connect to PostgreSQL externally?","text":"<p>Yes \u2014 by default, PostgreSQL binds to <code>127.0.0.1</code>. If you want to connect from an external app (like DBeaver or pgAdmin on your host machine), you'll need to:</p> <ol> <li>Change <code>host</code> in the <code>postgres</code> section of <code>dumb_config.json</code> to <code>0.0.0.0</code></li> <li>Add a port binding (e.g., <code>5432:5432</code>) to your container</li> <li>Optionally secure with a firewall or password change</li> </ol>"},{"location":"faq/postgres/#-is-it-safe-to-run-queries-against-the-databases","title":"\ud83e\uddea Is it safe to run queries against the databases?","text":"<p>Yes \u2014 but with caution. Direct queries using tools like pgAdmin or psql can be useful for debugging or data inspection, but changes may break app logic unless you know what you're doing.</p> <p>When in doubt, make a backup first!</p>"},{"location":"faq/postgres/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>pgAdmin Service Guide</li> <li>Riven Backend</li> <li>Zilean</li> <li>DUMB Configuration</li> </ul>"},{"location":"faq/rclone/","title":"rclone FAQ","text":"<p>Below are some common questions and solutions related to using rclone with DUMB.</p>"},{"location":"faq/rclone/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/rclone/#i-think-i-might-be-rate-limited-by-the-debrid-service---seeing-423-errors","title":"I think I might be rate limited by the debrid service - seeing <code>423</code> errors.","text":"<p>Add <code>- RCLONE_TSP_LIMIT=10</code> to the environment variable section of the compose.</p>"},{"location":"faq/rclone/#how-do-i-enable-rclone-filtering-to-include-only-specific-resolutions","title":"How do I enable rclone filtering to include only specific resolutions?","text":""},{"location":"faq/rclone/#using-rclone---exclude-pattern-matching","title":"Using rclone --exclude pattern matching:","text":""},{"location":"faq/rclone/#example-docker-compose-to-include-only-4k2160uhd-content","title":"Example docker-compose to include only 4k|2160|UHD content.","text":"<p>Add <code>- RCLONE_EXCLUDE=**/**{{(?i)(1080|720|480)}}**</code> to the environment variable section of the compose.</p>"},{"location":"faq/rclone/#example-docker-compose-to-exclude-only-4k2160uhd-content","title":"Example docker-compose to exclude only 4k|2160|UHD content.","text":"<p>Add <code>- RCLONE_EXCLUDE=**/**{{(?i)(4k|uhd|2160)}}**</code> to the environment variable section of the compose. </p>"},{"location":"faq/rclone/#using-rclone---filter-from-pattern-matching","title":"Using rclone --filter-from pattern matching:","text":""},{"location":"faq/rclone/#example-docker-compose-to-include-only-4k2160uhd-content_1","title":"Example docker-compose to include only 4k|2160|UHD content.","text":"<p>Add <code>- RCLONE_FILTER_FROM=/config/filter_include_2160.txt</code> to the environment variable section of the compose and add the below content to a <code>filter_include_2160.txt</code> file in the config directory for the container. </p>"},{"location":"faq/rclone/#example-filter_include_2160txt","title":"Example filter_include_2160.txt","text":"<pre><code>- **/**{{(?i)(1080|720|480)}}**\n+ *\n</code></pre>"},{"location":"faq/rclone/#example-docker-compose-to-exclude-only-4k2160uhd-content_1","title":"Example docker-compose to exclude only 4k|2160|UHD content.","text":"<p>Add <code>- RCLONE_FILTER_FROM=/config/filter_exclude_2160.txt</code> to the environment variable section of the compose and the below content to a <code>filter_exclude_2160.txt</code> file in the config directory for the container.</p>"},{"location":"faq/rclone/#example-filter_exclude_2160txt","title":"Example filter_exclude_2160.txt","text":"<pre><code>- **/**{{(?i)(4k|uhd|2160)}}**\n+ *\n</code></pre>"},{"location":"faq/rclone/#error-response-from-daemon-path-yourhostpathmnt-is-mounted-on--but-it-is-not-a-shared-mount","title":"Error response from daemon: path <code>/your/host/path/mnt</code> is mounted on <code>/</code> but it is not a shared mount.","text":"<p>From the host OS, enter <code>sudo mount --make-rshared /</code> </p> <p>Or if using a NAS device <code>sudo mount --make-rshared /volume1/</code> </p> <p>If neither of the above resolves the error, ensure that docker is not installed via snap. Install docker via apt. </p> <p>Note</p> <p><code>sudo mount --make-rshared</code> does not persist reboots, so it will need to be run each time WSL2 or Windows is restarted. Alternatively, see the below guide for automatically executing the command on startup for Ubuntu.</p>"},{"location":"faq/rclone/#ubuntu-systemd-service","title":"Ubuntu systemd service:","text":"<p>To make Ubuntu run a command like <code>sudo mount --make-rshared /</code> on startup, you can use a systemd service unit that executes this command at boot.</p> <p>Systemd is a system and service manager for Linux operating systems, which allows you to specify custom startup tasks through service units.</p> <p>Here's how you can do it:</p>"},{"location":"faq/rclone/#create-a-systemd-service-file","title":"Create a systemd service file:","text":"<p>First, you need to create a new systemd service file. You can do this by creating a file in the /etc/systemd/system directory. Let's call this file make-rshared.service.</p> <p>Open a terminal and use your favorite text editor to create this file. You'll need sudo privileges to create a file in this directory. For example, using nano:</p> <pre><code>sudo nano /etc/systemd/system/make-rshared.service\n</code></pre> <p>Add the following contents to the service file:</p> <pre><code>[Unit]\nDescription=Make root filesystem rshared\nAfter=local-fs.target\n\n[Service]\nType=oneshot\nExecStart=/bin/mount --make-rshared /\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"faq/rclone/#enable-and-start-the-service","title":"Enable and start the service:","text":"<p>After saving the file, you need to reload the systemd daemon to recognize your new service and then enable the service to start on boot:</p> <p><pre><code>sudo systemctl daemon-reload\nsudo systemctl enable make-rshared.service\n</code></pre> To start the service immediately without rebooting, you can use:</p> <pre><code>sudo systemctl start make-rshared.service\n</code></pre>"},{"location":"faq/rclone/#verify-the-service-is-active","title":"Verify the service is active:","text":"<p>After rebooting or starting the service, you can check its status to ensure it's active and has run successfully:</p> <pre><code>sudo systemctl status make-rshared.service\n</code></pre>"},{"location":"faq/rclone/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Rclone Configuration</li> </ul>"},{"location":"faq/zilean/","title":"Zilean FAQ","text":"<p>Below are some common questions and solutions related to Zilean when used with DUMB.</p>"},{"location":"faq/zilean/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/zilean/#why-is-zilean-spamming-my-logs","title":"Why is Zilean spamming my logs!?!","text":"<p>This is normal for a first-time run of Zilean. </p> <p>Zilean parses all the Debrid Media Manager (DMM) hash lists and saves them into the PostgreSQL database. </p> <p>Then, it will run a scheduled update to add/remove any new hash content. </p> <p>Depending on the system, the first-time run can take hours to days.</p>"},{"location":"faq/zurg/","title":"Zurg FAQ","text":"<p>Below are some common questions and solutions related to Zurg when used with DUMB.</p>"},{"location":"faq/zurg/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/zurg/#-error---rclone-w-realdebrid-subprocess--io-error-file-is-temporarily-unavailable-423-locked","title":"\u26a0\ufe0f <code>ERROR - rclone w/ RealDebrid subprocess: : IO error: File is temporarily unavailable: 423 Locked</code>","text":"<p>This error generally indicates that a rate limit is being enforced by Real-Debrid. It often occurs during media server scans that hit the API too frequently.</p> <p>To mitigate this: - If you're using Plex, this is commonly caused by automatic scans that trigger repeatedly. - Alternatively, you may also need to impose a transactions (requests) per second limit with rclone.</p> <p>See the Plex FAQ for more Plex-specific recommendations and details. See the rclone FAQ for more rclone-specific recommendations and details.</p>"},{"location":"faq/zurg/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Zurg Configuration</li> </ul>"},{"location":"features/","title":"Features Overview","text":""},{"location":"features/#-what-is-dumb","title":"\ud83d\ude80 What is DUMB?","text":"<p>DUMB (Debrid Unlimited Media Bridge) is an all-in-one media management solution designed to streamline the process of finding, downloading, organizing, and streaming media content. It integrates multiple services into a single Docker image, providing automation and efficiency for managing media libraries.</p>"},{"location":"features/#-key-features","title":"\ud83d\udd11 Key Features","text":"<ul> <li>Unified Deployment \u2013 Combines multiple tools into a single, easy-to-deploy system.</li> <li>Built-In Media Server Integration \u2013 Includes Plex Media Server (with future support for Jellyfin/Emby), fully embedded in the container to eliminate mount propagation issues.</li> <li>Automated Content Management \u2013 Uses Debrid Services, Plex Discover Watchlists, Trakt lists, and Overseerr to automate media retrieval.</li> <li>Integrated Web UI \u2013 Control and manage services through a simple web-based interface.</li> <li>Modular Design \u2013 Each service (Riven, Zurg, Zilean, etc.) is independently configurable and upgradable.</li> <li>Advanced Logging &amp; Monitoring \u2013 View and filter service logs directly from the DUMB Frontend.</li> </ul>"},{"location":"features/#-core-components","title":"\ud83d\udee0\ufe0f Core Components","text":"<p>DUMB integrates the following projects to create a seamless media experience:</p>"},{"location":"features/#-riven","title":"\ud83c\udf9e\ufe0f Riven","text":"<p>Riven is one of multiple options responsible for content management, handling search queries, downloading, and organizing media for streaming.</p>"},{"location":"features/#-cli-debrid","title":"\ud83c\udf9e\ufe0f CLI Debrid","text":"<p>CLI Debrid is one of multiple options responsible for content management, handling search queries, downloading, and organizing media for streaming.</p>"},{"location":"features/#-decypharr","title":"\ud83c\udf9e\ufe0f Decypharr","text":"<p>Decypharr is one of multiple options responsible for content management, handling search queries, downloading, and organizing media for streaming.</p>"},{"location":"features/#-zurg","title":"\ud83e\udd16 Zurg","text":"<p>Zurg acts as the automation engine that interacts with Real-Debrid to fetch media files.</p>"},{"location":"features/#-zilean","title":"\ud83d\uddc2\ufe0f Zilean","text":"<p>Zilean enhances content discovery and caching, optimizing the efficiency of media lookups.</p>"},{"location":"features/#-rclone","title":"\u2601\ufe0f rclone","text":"<p>rclone manages cloud storage connections and allows mounting remote debrid storage as if it were a local drive.</p>"},{"location":"features/#-plex-media-server","title":"\ud83d\udda5\ufe0f Plex Media Server","text":"<p>Plex is bundled directly inside DUMB, providing internal access to rclone-mounted content without needing to expose paths via external bind mounts.</p>"},{"location":"features/#-postgresql--pgadmin-4","title":"\ud83d\uddc3\ufe0f PostgreSQL &amp; pgAdmin 4","text":"<ul> <li>PostgreSQL serves as the primary database for storing metadata, configurations, and user preferences.</li> <li>pgAdmin 4 provides a web-based database management interface, making it easy to manage PostgreSQL.</li> </ul>"},{"location":"features/#-how-does-it-work","title":"\ud83d\udd0d How Does It Work?","text":"<p>DUMB simplifies the media management workflow by:</p> <ol> <li>Scanning User Watchlists (Plex, Trakt, Overseerr, etc.).</li> <li>Fetching Media from Debrid Services (Real-Debrid, AllDebrid, etc.).</li> <li>Downloading &amp; Organizing Content using Zurg &amp; Riven.</li> <li>Providing a Web Interface for monitoring &amp; controlling downloads.</li> <li>Allowing Streaming via Plex using internal access to rclone-mounted media.</li> </ol>"},{"location":"features/#-next-steps","title":"\ud83d\udccc Next Steps","text":"<p>Explore the Configuration section to understand how to set up and customize DUMB according to your needs.</p>"},{"location":"features/configuration/","title":"Configuration","text":""},{"location":"features/configuration/#-overview","title":"\ud83d\udcd1 Overview","text":"<p>DUMB relies on a centralized configuration file, <code>dumb_config.json</code>, to control its services, logging, API settings, and more. This file allows you to customize the behavior of DUMB without modifying the source code.</p> <p>DUMB also supports environment variables, .env files, and Docker secrets. If the same setting is defined in multiple places, the precedence is as follows:</p> <ol> <li>Environment Variables (highest priority)</li> <li>.env File</li> <li>Docker Secrets</li> <li><code>dumb_config.json</code> (lowest priority)</li> </ol>"},{"location":"features/configuration/#-configuration-file-structure","title":"\ud83d\udee0\ufe0f Configuration File Structure","text":"<p>Be Careful When Modifying <code>dumb_config.json</code></p> <p>While DUMB is highly configurable via <code>dumb_config.json</code>, some changes can cause failures during startup. As such, it is not recommended to make modifications unless you fully understand their impact.</p> <p>Below is the general structure of <code>dumb_config.json</code>:</p> <pre><code>{\n    \"puid\": 1000,\n    \"pgid\": 1000,\n    \"tz\": \"\",\n    \"dumb\": { ... },\n    \"cli_debrid\": { ... },\n    \"cli_battery\": { ... },\n    \"decypharr\": { ... },\n    \"phalanx_db\": { ... },\n    \"plex\": { ... },\n    \"plex_debrid\": { ... },\n    \"postgres\": { ... },\n    \"pgadmin\": { ... },\n    \"rclone\": { ... },\n    \"riven_backend\": { ... },\n    \"riven_frontend\": { ... },\n    \"zilean\": { ... },\n    \"zurg\": { ... }\n}\n</code></pre> <p>Each section configures a specific service.</p> <p>Below is a breakdown of some of the sections:</p>"},{"location":"features/configuration/#-general-settings","title":"\ud83d\udd27 General Settings","text":""},{"location":"features/configuration/#user--timezone","title":"User &amp; Timezone","text":"<pre><code>\"puid\": 1000,\n\"pgid\": 1000,\n\"tz\": \"\"\n</code></pre> <ul> <li>puid / pgid \u2013 Define the user and group IDs for container execution.</li> <li>tz \u2013 Set the timezone (e.g., <code>America/New_York</code>).</li> </ul> <p>(puid/pgid cannot be set to <code>0</code>, aka root)</p>"},{"location":"features/configuration/#-logging-settings","title":"\ud83d\udcdc Logging Settings","text":"<p>Located in <code>dumb</code>: <pre><code>\"log_level\": \"INFO\",\n\"log_name\": \"DUMB\",\n\"log_dir\": \"/log\",\n\"log_count\": 2,\n\"log_size\": \"10M\",\n\"color_log\": true\n</code></pre></p> <ul> <li>log_level \u2013 Set the logging verbosity (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>).</li> <li>log_dir \u2013 Directory where logs are stored.</li> <li>log_count \u2013 Number of rotated logs to retain.</li> <li>log_size \u2013 Maximum log file size before rotation.</li> <li>color_log \u2013 Enables colored log output.</li> </ul>"},{"location":"features/configuration/#-integration-tokens--credentials","title":"\ud83d\udd10 Integration Tokens &amp; Credentials","text":"<p>Located in the <code>dumb</code> section of <code>dumb_config.json</code>:</p> <pre><code>\"plex_token\": \"\",\n\"plex_address\": \"\",\n\"github_token\": \"\",\n\"github_username\": \"\"\n</code></pre>"},{"location":"features/configuration/#-plex-integration","title":"\ud83d\udd04 Plex Integration","text":"<ul> <li><code>plex_token</code> \u2013 This token is used by Riven backend for interacting with your Plex account. It allows features such as using watchlists and sending library scan requests to the Plex server.</li> <li><code>plex_address</code> \u2013 The internal or external URL of your Plex server (e.g., <code>http://127.0.0.1:32400</code>).</li> </ul> <p>These values are used automatically by Riven when setting up the Riven Backend.</p>"},{"location":"features/configuration/#-github-integration","title":"\ud83e\uddec GitHub Integration","text":"<ul> <li><code>github_token</code> \u2013 Used to increase GitHub API rate limits and unlock access to private/sponsored repositories such as <code>zurg</code> when associated with your GitHub account.</li> <li><code>github_username</code> \u2013 (Reserved for future use) Will support additional GitHub-sourced services and contributor personalization.</li> </ul> <p>To create a GitHub token:</p> <ol> <li>Go to GitHub Developer Settings \u2192 Tokens (Classic)</li> <li>Click Generate new token (classic)</li> <li> <p>Set an expiration and enable the following scopes:</p> <ul> <li><code>repo:all</code></li> <li><code>write:packages</code> </li> <li><code>read:packages</code></li> </ul> <p></p> </li> <li> <p>Click Generate token and copy the token \u2014 it will only be shown once</p> </li> <li>Add the token to your <code>.env</code> file or docker compose with <code>DMB_GITHUB_TOKEN=</code>, or <code>dumb_config.json</code> under <code>\"github_token\"</code></li> </ol>"},{"location":"features/configuration/#-service-configuration","title":"\ud83d\udd0c Service Configuration","text":"<p>Each DUMB-integrated service is configured within its own section of <code>dumb_config.json</code>.</p> <p>See the individual service pages for in-depth configuration details:</p> <ul> <li>DUMB API</li> <li>DUMB Frontend</li> <li>Decypharr</li> <li>CLI Debrid</li> <li>Plex Media Server</li> <li>pgAdmin 4</li> <li>PostgreSQL</li> <li>rclone</li> <li>Riven Backend</li> <li>Riven Frontend</li> <li>Zilean</li> <li>Zurg</li> </ul>"},{"location":"features/configuration/#-next-steps","title":"\ud83d\udccc Next Steps","text":"<ol> <li>Review and modify <code>dumb_config.json</code> as needed.</li> <li>Review the Usage page. </li> <li>For a deep dive into individual services, see the Services section.</li> </ol>"},{"location":"features/usage/","title":"Usage","text":""},{"location":"features/usage/#-running-dumb","title":"\ud83d\ude80 Running DUMB","text":"<p>DUMB automatically starts the services defined in <code>dumb_config.json</code> in the proper order. Each service can also be managed independently using the DUMB Frontend or by directly modifying the configuration.</p> <p>Onboarding</p> <p>DUMB is preset to disable all services, other than the API and Frontend on the first startup. </p> <p>On first launch of the DUMB Frontend, you will be directed to the Onboarding process.  </p>"},{"location":"features/usage/#-automatic-service-start","title":"\ud83d\udd04 Automatic Service Start","text":"<p>All services with <code>\"enabled\": true</code> in the config will be started on container launch.</p> <p>If a service fails to start, check its log file in the <code>/log</code> directory (or wherever <code>log_dir</code> is set).</p>"},{"location":"features/usage/#-managing-updates","title":"\ud83d\udd03 Managing Updates","text":""},{"location":"features/usage/#-manual-updates","title":"\ud83d\udee0\ufe0f Manual Updates","text":"<p>Each service can be updated by modifying the configuration file or using the DUMB Frontend. </p> <p>Updates include:</p> <ul> <li>Branch switching</li> <li>Version pinning</li> <li>Auto-update toggling</li> </ul>"},{"location":"features/usage/#-auto-update","title":"\u2699\ufe0f Auto-Update","text":"<p>Some services support automatic updates. </p> <p>Enable by setting: <pre><code>\"auto_update\": true,\n\"auto_update_interval\": 24\n</code></pre></p> <p><code>auto_update_interval</code> is measured in hours.</p> <p>Services supporting auto-updates:</p> <ul> <li>DUMB Frontend</li> <li>Plex Media Server (Future release)</li> <li>Riven Backend and Frontend</li> <li>Decypharr</li> <li>CLI Debrid</li> <li>Plex Debrid</li> <li>Zilean</li> <li>Zurg</li> </ul>"},{"location":"features/usage/#-shutdown-handling","title":"\u26a1 Shutdown Handling","text":"<p>DUMB handles graceful shutdown of all services. </p> <p>This includes:</p> <ul> <li>Stopping running processes</li> <li>Unmounting rclone mounts</li> <li>Syncing configuration states</li> </ul> <p>To allow time for clean shutdowns, use: <pre><code>docker-compose:\n  stop_grace_period: 60s\n</code></pre></p>"},{"location":"features/usage/#-tips","title":"\ud83d\udccc Tips","text":"<ul> <li>Always monitor <code>/log/*.log</code> files for troubleshooting or monitor the logs from the DUMB Frontend.</li> <li>Logs can be colored if <code>color_log</code> is enabled in the config.</li> </ul>"},{"location":"features/usage/#-related-docs","title":"\ud83d\udcce Related Docs","text":"<ul> <li>Configuration</li> <li>Services Overview</li> <li>API</li> </ul>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started with DUMB","text":"<p>Welcome to DUMB \u2013 Debrid Unlimited Media Bridge: a unified media management and automation tool designed for users who want to streamline their content discovery, acquisition, and playback using services like Plex, Real-Debrid, Trakt, Overseerr, and more.</p>"},{"location":"getting-started/#-what-is-dumb","title":"\ud83d\udd0d What Is DUMB?","text":"<p>DUMB combines multiple backend services into a single containerized system to provide:</p> <ul> <li>\ud83d\udd0e Search and discovery using Trakt, Plex Watchlists, Overseerr, etc.</li> <li>\u26a1 Real-Debrid integration for content fetching via Zurg</li> <li>\u2601\ufe0f Remote mounting of Debrid storage using rclone</li> <li>\ud83e\udde0 Metadata caching with Zilean</li> <li>\ud83d\udce6 Automated download orchestration with Riven</li> <li>\ud83d\udcca Web-based dashboards for control and monitoring</li> </ul>"},{"location":"getting-started/#-is-this-for-you","title":"\ud83e\udde9 Is This for You?","text":"<p>DUMB is ideal if you:</p> <ul> <li>Have a Plex, Jellyfin, or Emby or server and want to auto-fill your library from your Overseerr/Jellyseerr, Trakt, Plex Watchlists, Mdblist, or Listrr</li> <li>Want a plug-and-play solution that works with Debrid services</li> <li>Prefer a containerized, modular deployment</li> <li>Want real-time log viewing, auto-updates, and one-click service control</li> <li>Don't want or know how to manually configure and deploy all the incorporated Services</li> </ul>"},{"location":"getting-started/#-architecture-at-a-glance","title":"\ud83d\uddbc\ufe0f Architecture at a Glance","text":"<p>For details on each service, visit the Services Overview.</p>"},{"location":"getting-started/#-system-requirements","title":"\ud83d\udee0\ufe0f System Requirements","text":"<ul> <li>\ud83d\udc33 Docker or a compatible runtime</li> <li>\u2699\ufe0f Linux (recommended) or Windows (WSL)</li> <li>\ud83d\udd12 Real-Debrid</li> </ul>"},{"location":"getting-started/#-what-next","title":"\u23ed\ufe0f What Next?","text":"<ol> <li>Head to Installation to get ready.</li> <li>Choose your platform in Deployment</li> <li>Learn about Features, Services, and Configuration</li> </ol>"},{"location":"getting-started/installation/","title":"\ud83d\udee0\ufe0f Installation &amp; Prerequisites","text":"<p>Before you deploy DUMB, make sure your environment and accounts are ready.</p>"},{"location":"getting-started/installation/#-system-requirements","title":"\u2705 System Requirements","text":"<ul> <li>Docker or Docker-compatible environment</li> <li>Linux system (WSL on Windows when using <code>rshared</code>)</li> <li>Minimum 2 vCPU, 2GB RAM, SSD recommended</li> </ul> <p>Docker Desktop</p> <p>Docker Desktop CANNOT be used to run DUMB when using <code>rshared</code> mount propagation. </p> <p>Docker Desktop does not support the mount propagation required for rclone mounts.</p> <p></p> <p>See the deployment options to run DUMB on Windows through WSL2.</p>"},{"location":"getting-started/installation/#-required-credentials","title":"\ud83d\udd10 Required Credentials","text":"Service Required Info Debrid API Key (Real-Debrid) GitHub Token (if using the sponsored Zurg repo) <p>\ud83d\udccc See Configuration \u2192 Integration Tokens</p>"},{"location":"getting-started/installation/#-required-directories","title":"\ud83d\udcc2 Required Directories","text":"<p>You\u2019ll need to bind mount the following volumes when running the container:</p> Container Mount Path Description <code>/config</code> Location for configuration files <code>/log</code> Location for logs <code>/zurg/RD</code> Location for Zurg RealDebrid active configuration <code>/riven/backend/data</code> Location for Riven Backend data <code>/postgres_data</code> Location for PostgreSQL databases <code>/pgadmin/data</code> Location for pgAdmin 4 data <code>/zilean/app/data</code> Location for Zilean data <code>/plex_debrid/config</code> Location for plex_debrid data <code>/cli_debrid/data</code> Location for cli_debrid data <code>/phalanx_db/data</code> Location for phalanx_db data <code>/decypharr</code> Location for decypharr data <code>/plex</code> Location for Plex Media Server data <code>/mnt/debrid</code> Location for raw debrid files/links and symlinks <p>/config</p> <p>If a Zurg config.yml and/or Zurg app is placed here, it will be used to override the default configuration and/or app used at startup</p> <p>/mnt/debrid:rshared</p> <p>The <code>:rshared</code> must be included in order to support mount propagation for rclone to the host when exposing the raw debrid files/links to an external container; e.g., the arrs or a media server.</p> <p><code>:rshared</code> is not required when using the default configuration leveraging the internal media server or when not utilizing Decypharr</p>"},{"location":"getting-started/installation/#-preparation-checklist","title":"\ud83e\uddf0 Preparation Checklist","text":"<ul> <li> <p>Choose your deployment method:</p> <ul> <li>Docker</li> <li>Dockge</li> <li>Portainer</li> <li>Unraid</li> <li>WSL</li> <li>Proxmox</li> <li>QNAP</li> <li>Synology</li> <li>TrueNAS</li> </ul> </li> <li> <p>Run the container and access the web UI at the configured port</p> </li> <li>View real-time or service logs to verify service health</li> </ul>"},{"location":"getting-started/installation/#-next-steps","title":"\u23ed\ufe0f Next Steps","text":"<ul> <li>\u2795 Explore Features</li> <li>\u2699\ufe0f Tune Your Configuration</li> <li>\ud83d\udd0d Inspect the Services</li> </ul>"},{"location":"services/","title":"Services Overview","text":"<p>DUMB is composed of multiple services that work together to provide a complete automated media management system. Services are categorized into:</p> <ul> <li>DUMB Services: Required for system orchestration and user interaction</li> <li>Core Services: Manage Debrid content orchestration or media playback</li> <li>Dependent Services: Required by one or more core services to function</li> <li>Optional Services: Enhance or simplify workflows but are not required</li> </ul>"},{"location":"services/#-how-the-services-work-together","title":"\ud83e\uddf9 How the Services Work Together","text":"<p>DUMB is built as a collection of microservices that communicate over internal APIs and shared paths. Below is an example flow:</p> <ol> <li> <p>Platform Infrastructure</p> <ul> <li>\ud83d\udd10 DUMB API coordinates and manages all service interactions</li> <li>\ud83d\uddc3\ufe0f DUMB Frontend provides the web interface for managing and viewing services</li> </ul> </li> <li> <p>Debrid Orchestration &amp; Content Management</p> <ul> <li>\ud83e\udde0 Riven Backend, \ud83e\uddf2 CLI Debrid, \ud83d\ude81 Plex Debrid, and \ud83c\udf10 Decypharr each serve as a Debrid orchestrator: requesting, managing, and monitoring content acquisition workflows</li> <li>These core services integrate with providers like Trakt, Overseerr, and Debrid APIs to manage what content gets fetched</li> </ul> </li> <li> <p>Media Playback</p> <ul> <li>\ud83c\udfa5 Plex is the core service that hosts and serves collected content to users<ul> <li>It relies on symlinked or mounted content made available through rclone/Zurg from the other core services</li> </ul> </li> </ul> </li> <li> <p>Storage &amp; Retrieval</p> <ul> <li>\ud83d\udcc1 rclone mounts remote Debrid storage for local access</li> <li>\u26a1 Zurg provides WebDAV access to debrid downloads</li> </ul> </li> <li> <p>Metadata &amp; Caching</p> <ul> <li>\ud83d\udee2 CLI Battery and \ud83c\udf10 Phalanx DB serve as local or distributed metadata stores</li> <li>\ud83d\udee2 Zilean caches metadata and exposes a Torznab-compatible indexer for scraping optimization</li> </ul> </li> <li> <p>Database Layer</p> <ul> <li>\ud83d\udcc2 PostgreSQL stores metadata for Riven, Zilean, and pgAdmin</li> <li>\ud83d\udcca pgAdmin is a GUI for exploring PostgreSQL databases</li> </ul> </li> </ol>"},{"location":"services/#-quick-reference","title":"\ud83e\uddf1 Quick Reference","text":"Service Type Key Role DUMB API DUMB Centralized orchestration DUMB Frontend DUMB Web-based control panel Riven Backend Core Debrid orchestrator (searching, scraping, automation) CLI Debrid Core Debrid orchestrator (list scanning, upgrades, Plex watch) Plex Debrid Core Debrid orchestrator (direct scraping and playback prep) Decypharr Core Debrid orchestrator for Arrs via torrent API integration Plex Core Media server for hosting and playing content rclone Dependent Mount Debrid storage Zurg Dependent Serve Debrid content via WebDAV PostgreSQL Dependent Persistent metadata database CLI Battery Dependent Metadata service for CLI Debrid Phalanx DB Dependent Distributed metadata storage Zilean Optional Metadata cache and scraping backend pgAdmin Optional PostgreSQL GUI Riven Frontend Optional UI for Riven Backend"},{"location":"services/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Use the onboarding UI to enable only the services you need</li> <li>Services will auto-start in dependency order</li> <li>Logs and errors can be viewed in the DUMB Frontend</li> </ul>"},{"location":"services/#-service-categories","title":"\ud83d\udcda Service Categories","text":"<ul> <li>DUMB Services</li> <li>Core Services</li> <li>Dependent Services</li> <li>Optional Services</li> </ul>"},{"location":"services/core/","title":"Core Services","text":"<p>Core services in DUMB are essential building blocks that handle media automation, storage, metadata processing, and orchestration. These services often rely on dependent services to operate fully and may optionally integrate with additional utilities for enhanced functionality.</p>"},{"location":"services/core/#-what-are-core-services","title":"\ud83d\udce6 What Are Core Services?","text":"<p>Core services are the services that:</p> <ul> <li>Drive a major part of the media pipeline (e.g., indexing, downloading, symlinking, organization, hosting, playback, etc. )</li> <li>May require one or more dependent services to function</li> </ul> <p>You can use as many core services simultaneously as you like</p>"},{"location":"services/core/#-core-service-index","title":"\ud83e\uddf1 Core Service Index","text":"Service Description Depends On Optional Integrations CLI Debrid Debrid media scraper, automation engine, and upgrade engine CLI Battery, Phalanx DB, rclone, Zurg Zilean Decypharr Debrid-native torrent client for use with the arrs (Sonarr/Radarr) to create symlinks to debrid content rclone Zilean, Sonarr, Radarr Plex Hosts media collected by core services Plex Debrid Debrid media scraper and automation engine rclone, Zurg Zilean Riven Backend Debrid media scraper and automation engine PostgreSQL, rclone, Zurg Zilean, Riven Frontend"},{"location":"services/core/#-dependency-guidelines","title":"\ud83d\udd17 Dependency Guidelines","text":"<p>If you enable a core service, be sure to also:</p> <ul> <li>Review optional integrations to maximize capabilities</li> <li>Use the onboarding flow in the DUMB Frontend for auto-detection and guided setup </li> </ul>"},{"location":"services/core/#-example-workflows","title":"\ud83d\ude80 Example Workflows","text":""},{"location":"services/core/#cli-debrid","title":"CLI Debrid","text":"<ul> <li>Requires: CLI Battery, Phalanx DB, rclone, and Zurg</li> <li>Optionally Uses: Zilean (as a scraper)</li> <li>Outputs: Clean symlinks for Plex/Emby/Jellyfin and/or monitors Plex library for collected media</li> </ul>"},{"location":"services/core/#decypharr","title":"Decypharr","text":"<ul> <li>Requires: rclone</li> <li>Optionally Uses: Zilean (as a scraper via the arrs)</li> <li>Outputs: Symlinks automatically managed and organized by the arrs (Sonarr/Radarr)</li> </ul>"},{"location":"services/core/#plex","title":"Plex","text":"<ul> <li>Requires: Content to already exist in <code>/mnt/debrid</code></li> <li>Does Not Scrape or collect \u2014 serves media fetched by others</li> </ul>"},{"location":"services/core/#plex-debrid","title":"Plex Debrid","text":"<ul> <li>Requires: rclone, and Zurg</li> <li>Optionally Uses: Zilean (as a scraper)</li> <li>Outputs: Raw files from debrid for Plex/Emby/Jellyfin</li> </ul>"},{"location":"services/core/#riven-backend","title":"Riven Backend","text":"<ul> <li>Requires: PostgreSQL, rclone, and Zurg</li> <li>Optionally Uses: Zilean (as a scraper)</li> <li>Outputs: Clean symlinks for Plex/Emby/Jellyfin</li> </ul>"},{"location":"services/core/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Use <code>process_name</code> in <code>dumb_config.json</code> to identify each service clearly in logs and the UI</li> <li>Onboarding will automatically add required dependencies for the Core services selected</li> <li>Dependent services will start automatically when their core service is launched</li> </ul>"},{"location":"services/core/#-related-pages","title":"\ud83d\udcda Related Pages","text":"<ul> <li>Dependent Services</li> <li>Optional Services</li> <li>How Services Work Together</li> </ul>"},{"location":"services/core/cli-debrid/","title":"CLI Debrid (Core Service)","text":"<p>CLI Debrid is a core content orchestrator in the DUMB ecosystem. It automates media collection and upgrading through Debrid services (e.g. Real-Debrid), working alongside Trakt, Plex, Overseerr, and various scrapers. CLI Debrid can either monitor your Plex libraries or generate symlinks for organized media delivery to Plex or similar servers.</p>"},{"location":"services/core/cli-debrid/#-service-relationships","title":"\ud83d\udd17 Service Relationships","text":"Classification Role Core Service Debrid Orchestrator Depends On CLI Battery, rclone, Zurg Optional Phalanx DB, Zilean Exposes UI Yes (Flask app on port 5000)"},{"location":"services/core/cli-debrid/#-configuration-in-dumb_configjson","title":"\ud83d\udce6 Configuration in <code>dumb_config.json</code>","text":"<pre><code>\"cli_debrid\": {\n    \"enabled\": false,\n    \"process_name\": \"CLI Debrid\",\n    \"repo_owner\": \"godver3\",\n    \"repo_name\": \"cli_debrid\",\n    \"release_version_enabled\": false,\n    \"release_version\": \"v0.6.07\",\n    \"branch_enabled\": false,\n    \"branch\": \"main\",\n    \"suppress_logging\": false,\n    \"log_level\": \"INFO\",\n    \"port\": 5000,\n    \"auto_update\": false,\n    \"auto_update_interval\": 24,\n    \"clear_on_update\": true,\n    \"exclude_dirs\": [\n        \"/cli_debrid/data\"\n    ],\n    \"platforms\": [\n        \"python\"\n    ],\n    \"command\": [\n        \"/cli_debrid/venv/bin/python\",\n        \"main.py\"\n    ],\n    \"config_dir\": \"/cli_debrid\",\n    \"config_file\": \"/cli_debrid/data/config/config.json\",\n    \"log_file\": \"/cli_debrid/data/logs/debug.log\",\n    \"env\": {\n        \"USER_CONFIG\": \"/cli_debrid/data/config/\",\n        \"USER_LOGS\": \"/cli_debrid/data/logs/\",\n        \"USER_DB_CONTENT\": \"/cli_debrid/data/db_content/\",\n        \"CLI_DEBRID_PORT\": \"{port}\"\n    }\n},\n</code></pre>"},{"location":"services/core/cli-debrid/#-key-configuration-fields","title":"\ud83d\udd0d Key Configuration Fields","text":"<ul> <li><code>enabled</code>: Toggle to run CLI Debrid via DUMB.</li> <li><code>process_name</code>: Used for display and logs.</li> <li><code>repo_owner</code>, <code>repo_name</code>: GitHub repo to use for updates.</li> <li><code>release_version_enabled</code>, <code>branch_enabled</code>: Target a specific tag or branch.</li> <li><code>log_level</code>, <code>suppress_logging</code>: Logging controls.</li> <li><code>port</code>: Flask web interface port.</li> <li><code>env</code>: Environment variable configuration used by CLI Debrid.</li> <li><code>clear_on_update</code>, <code>exclude_dirs</code>: Clean old files during update while protecting data dirs.</li> </ul>"},{"location":"services/core/cli-debrid/#-what-cli-debrid-does","title":"\u2699\ufe0f What CLI Debrid Does","text":""},{"location":"services/core/cli-debrid/#-intelligent-automation","title":"\ud83e\udde0 Intelligent Automation","text":"<ul> <li>Monitors your Plex library or local folder structure (symlinked library)</li> <li>Scrapes for content from various sources (Zilean, Jackett, Torrentio, Nyaa, Media Fusion)</li> <li>Downloads new or upgraded content using Debrid providers</li> <li>Optionally leverages webhook notifications from Overseerr or Zurg to trigger updates</li> </ul>"},{"location":"services/core/cli-debrid/#-supported-features","title":"\ud83c\udf9b\ufe0f Supported Features","text":"<ul> <li>Content Sources: MDBList, Trakt, Overseerr</li> <li>Upgrading: Queue system for quality upgrades</li> <li>Web UI: Web dashboard for real-time monitoring and control</li> <li>Metadata: Cached locally in the <code>cli_battery</code></li> <li>Notifications: Optional support for Discord, Email, Telegram, NTFY</li> <li>Scraping Tuning: Manual test interface to evaluate scraper priorities</li> </ul>"},{"location":"services/core/cli-debrid/#-required-component-cli-battery","title":"\u26a1 Required Component: CLI Battery","text":"<p>CLI Battery must be running for CLI Debrid to function.</p> <pre><code>\"cli_battery\": {\n    \"enabled\": false,\n    \"process_name\": \"CLI Battery\",\n    \"suppress_logging\": false,\n    \"log_level\": \"INFO\",\n    \"port\": 5001,\n    \"platforms\": [\n        \"python\"\n    ],\n    \"command\": [\n        \"/cli_debrid/venv/bin/python\",\n        \"cli_battery/main.py\"\n    ],\n    \"config_dir\": \"/cli_debrid\",\n    \"config_file\": \"/cli_debrid/data/config/settings.json\",\n    \"log_file\": \"/cli_debrid/data/logs/battery_debug.log\",\n    \"env\": {\n        \"PYTHONPATH\": \"/cli_debrid\",\n        \"USER_CONFIG\": \"/cli_debrid/data/config/\",\n        \"USER_LOGS\": \"/cli_debrid/data/logs/\",\n        \"USER_DB_CONTENT\": \"/cli_debrid/data/db_content/\",\n        \"CLI_DEBRID_BATTERY_PORT\": \"{port}\"\n    }\n},\n</code></pre> <p>CLI Battery provides local metadata storage and Trakt integration, acting as the \"memory\" of CLI Debrid.</p>"},{"location":"services/core/cli-debrid/#-optional-utility-phalanx-db","title":"\ud83e\uddf0 Optional Utility: Phalanx DB","text":"<pre><code>\"phalanx_db\": {\n    \"enabled\": false,\n    \"process_name\": \"Phalanx DB\",\n    \"repo_owner\": \"godver3\",\n    \"repo_name\": \"phalanx_db_hyperswarm\",\n    \"release_version_enabled\": false,\n    \"release_version\": \"v0.50\",\n    \"branch_enabled\": false,\n    \"branch\": \"main\",\n    \"suppress_logging\": false,\n    \"log_level\": \"INFO\",\n    \"port\": 8888,\n    \"auto_update\": false,\n    \"auto_update_interval\": 24,\n    \"clear_on_update\": true,\n    \"exclude_dirs\": [\n        \"/phalanx_db/data\"\n    ],\n    \"platforms\": [\n        \"pnpm\"\n    ],\n    \"command\": [\n        \"node\",\n        \"phalanx_db_rest.js\"\n    ],\n    \"config_dir\": \"/phalanx_db\",\n    \"env\": {}\n},\n</code></pre> <p>While listed as optional, the onboarding process will treat it as a dependent service and enable it by default. You can disable it from the DUMB Frontend if desired</p> <p>Phalanx DB provides distributed metadata storage via Hyperswarm. It is optional but can enhance metadata resilience and syncing.</p>"},{"location":"services/core/cli-debrid/#-mount-considerations","title":"\ud83d\udd01 Mount Considerations","text":"<p>CLI Debrid can create symlinks to be used in the media server, or if using the rclone mounts directly in the media server it can monitor the Plex libraries for completed items.</p> <p>In both cases, ensure the appropriate path for the rclone or zurg mount is used when adding the <code>Original Files Path</code>.</p> <p>The <code>Original Files Path</code> is relative to the paths inside the container</p> <p>Example: If the rclone <code>mount_dir</code> is set to <code>/data</code>, the rclone <code>mount_name</code> is set to <code>rclone_RD</code>, and you're using <code>zurg_enabled: true</code> for rclone, then you would enter:  </p> <p></p> <p>As mentioned, CLI Debrid also monitors either the created symlinks or the Plex libraries for completed items.</p> <p>As such, it's important to ensure you select the appropriate option for your deployment. </p> <p><code>Symlinked/Local</code> will create symlinks in the user defined path, whereas <code>Plex</code> will monitor the Plex Libraries defined and not create symlinks</p> <p> </p>"},{"location":"services/core/cli-debrid/#-zilean-built-in","title":"\ud83d\ude80 Zilean Built-in!","text":"<p>With Zilean enabled in DUMB, you can also leverage it with CLI Debrid</p> <p></p>"},{"location":"services/core/cli-debrid/#-queues--processing-behind-the-scenes","title":"\ud83e\udde0 Queues &amp; Processing (Behind the Scenes)","text":"<ul> <li>Wanted Queue: Items identified from your lists that need to be downloaded but haven't been processed by the scraper yet. Shows the time the item was last scraped. If within 24 hours of scraping items will remain in the Wanted queue.</li> <li>Scraping Queue: Items actively being searched for download sources (torrents/magnets).</li> <li>Adding Queue: Items for which a source has been found and are being added to your debrid service</li> <li> <p>Checking Queue: Monitoring items for presence locally or in Plex. </p> <ul> <li> <p>Cached: Available in debrid cache and ready to use. </p> </li> <li> <p>Downloading: Currently being downloaded with progress shown; grouped if multiple files. </p> </li> <li> <p>Filenames: Can be toggled to show specific files being processed</p> </li> </ul> </li> <li> <p>Unreleased: Items identified but waiting for their release date before processing continues. Displays the relevant release date(s). Items requiring a physical release will indicate this.</p> </li> <li>Blacklisting: Items that have been explicitly marked to be ignored by the application.</li> <li>Upgrading Queue: Items that are being considered for Upgrading. They have been collected and now for 24 hours cli_debrid will try to find upgrades once an hour.</li> <li>Final Check: Items for which initial scraping attempts failed. These items wait for a configured delay (defined in settings) before one last search attempt is automatically triggered. Shows when the item entered this waiting period. If the final search is successful, the item moves to Adding. If it fails again, the item is typically moved to Blacklisted.</li> <li>Pending Uncached: Items associated with uncached torrents that would take your account over its limit wait in the Pending Uncached queue until your download limit returns to normal.</li> <li>Sleeping Queue: Items that cli_debrid failed to find. Shows a 'Wake Count' indicating how many times the item has been retried.</li> </ul> <p>All queues are managed on scheduled intervals.</p>"},{"location":"services/core/cli-debrid/#-webhook-support","title":"\ud83d\udce1 Webhook Support","text":"<p>CLI Debrid can listen for:</p> <ul> <li>Overseerr Webhooks: Add content when users request it</li> <li>Zurg Webhooks: React to completed downloads (Symlink mode)</li> </ul> <p>Example Zurg update hook:</p> <pre><code>#!/bin/bash\nwebhook_url=\"http://localhost:5000/webhook/rclone\"\nfor arg in \"$@\"\ndo\n  encoded=$(echo -n \"$arg\" | python3 -c \"import sys, urllib.parse as ul; print(ul.quote(sys.stdin.read()))\")\n  curl -s -X GET \"$webhook_url?file=$encoded\"\ndone\necho \"Webhook update complete.\"\n</code></pre>"},{"location":"services/core/cli-debrid/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/core/cli-debrid/#-access","title":"\ud83c\udf10 Access","text":"<ul> <li> <p>Navigate to: <code>http://&lt;host&gt;:&lt;port&gt;</code> </p> </li> <li> <p>default port <code>5000</code></p> </li> </ul>"},{"location":"services/core/cli-debrid/#additional-resources","title":"Additional Resources","text":"<ul> <li>CLI Debrid GitHub</li> <li>CLI Battery GitHub</li> <li>Phalanx DB GitHub</li> <li>Join the CLI Debrid Community on Discord</li> </ul>"},{"location":"services/core/decypharr/","title":"Decypharr (Core Service)","text":"<p>Decypharr is a self-hosted, Go-based torrent manager and content orchestrator that integrates multiple Debrid services and acts as a mock Qbittorrent client for Arr applications like Sonarr and Radarr. It is a core component in DUMB for automating torrent-based downloads with native Debrid support and seamless library linking.</p>"},{"location":"services/core/decypharr/#-service-relationships","title":"\ud83d\udd17 Service Relationships","text":"Classification Role Core Service Debrid Torrent Orchestrator Depends On rclone Optional None Exposes UI Yes (Web UI)"},{"location":"services/core/decypharr/#-configuration-in-dumb_configjson","title":"\ud83d\udce6 Configuration in <code>dumb_config.json</code>","text":"<pre><code>\"decypharr\": {\n    \"enabled\": false,\n    \"process_name\": \"Decypharr\",\n    \"repo_owner\": \"sirrobot01\",\n    \"repo_name\": \"decypharr\",\n    \"release_version_enabled\": false,\n    \"release_version\": \"v1.0.0\",\n    \"branch_enabled\": false,\n    \"branch\": \"main\",\n    \"suppress_logging\": false,\n    \"log_level\": \"INFO\",\n    \"port\": 8282,\n    \"auto_update\": false,\n    \"auto_update_interval\": 24,\n    \"clear_on_update\": false,\n    \"exclude_dirs\": [],\n    \"command\": [\n        \"/decypharr/decypharr\",\n        \"--config\",\n        \"/decypharr\"\n    ],\n    \"config_dir\": \"/decypharr\",\n    \"config_file\": \"/decypharr/config.json\",\n    \"log_file\": \"/decypharr/logs/decypharr.log\",\n    \"env\": {},\n    \"debrid_service\": \"\",\n    \"api_key\": \"\"\n},\n</code></pre>"},{"location":"services/core/decypharr/#-key-configuration-fields","title":"\ud83d\udd0d Key Configuration Fields","text":"<ul> <li><code>enabled</code>: Toggle to run CLI Debrid via DUMB.</li> <li><code>process_name</code>: Used for display and logs.</li> <li><code>repo_owner</code>, <code>repo_name</code>: GitHub repo to use for updates.</li> <li><code>release_version_enabled</code>, <code>branch_enabled</code>: Target a specific tag or branch.</li> <li><code>log_level</code>, <code>suppress_logging</code>: Logging controls.</li> <li><code>port</code>: Flask web interface port.</li> <li><code>env</code>: Environment variable configuration used by CLI Debrid.</li> <li><code>clear_on_update</code>, <code>exclude_dirs</code>: Clean old files during update while protecting data dirs.</li> </ul>"},{"location":"services/core/decypharr/#-what-decypharr-does","title":"\u2699\ufe0f What Decypharr does","text":""},{"location":"services/core/decypharr/#-how-it-works","title":"\ud83e\udde0 How It Works","text":"<p>Decypharr acts as both a torrent manager and a renaming/organizing engine:</p> <ul> <li>Handles torrent links via Debrid services</li> <li>Mimics Qbittorrent API for seamless *Arr integration</li> <li>Renames and organizes files into structured symlink folders</li> <li>Provides a Web UI and WebDAV endpoints for remote management</li> <li>Ensures all changes propagate cleanly between containers using <code>rshared</code>/<code>rslave</code></li> </ul>"},{"location":"services/core/decypharr/#-supported-features","title":"\ud83c\udf9b\ufe0f Supported Features","text":"<ul> <li>\u2705 Mock Qbittorrent API for Sonarr, Radarr, Lidarr, etc.</li> <li>\ud83d\udda5 Full-featured UI for managing torrents</li> <li>\ud83c\udf10 Proxy filtering for un-cached Debrid torrents</li> <li>\ud83d\udd01 Multiple Debrid service support (Real Debrid, Torbox, Debrid Link, All Debrid)</li> <li>\ud83d\udcc2 WebDAV server per Debrid provider for mounting remote files</li> <li>\ud83d\udd27 Repair Worker for missing files or symlinks</li> </ul>"},{"location":"services/core/decypharr/#-integration-with-dumb","title":"\ud83d\udce6 Integration with DUMB","text":"<p>To successfully run Decypharr with DUMB, the following configuration and mounting steps must be completed:</p>"},{"location":"services/core/decypharr/#1-bind-mount-setup","title":"1. Bind Mount Setup","text":"<p>In both your <code>DUMB</code> and <code>arrs</code> docker-compose files, include the following bind mounts (replace <code>...</code> with the full host path to your DUMB bind mount):</p> <p>DUMB Compose:</p> <pre><code>tmpfs:\n  - .../DUMB/mnt/debrid:/mnt/debrid:rshared\n</code></pre> <p>Arrs Compose (Sonarr/Radarr):</p> <pre><code>volumes:\n  - .../DUMB/mnt/debrid:/mnt/debrid:rslave\n</code></pre> <p>These mounts are required to ensure Decypharr-created symlinks are visible to the Arr containers.</p>"},{"location":"services/core/decypharr/#2-configure-root-folders-in-arrs","title":"2. Configure Root Folders in Arrs","text":"<p>Inside the Sonarr and Radarr web UI:</p> <ul> <li>Navigate to Settings &gt; Media Management &gt; Root Folders</li> <li> <p>Add the following paths:</p> </li> <li> <p>Radarr: <code>/mnt/debrid/decypharr_symlinks/movies</code></p> </li> <li>Sonarr: <code>/mnt/debrid/decypharr_symlinks/shows</code></li> </ul> <p>These directories are managed by Decypharr and must be used for proper operation.</p>"},{"location":"services/core/decypharr/#3-connect-decypharr-to-arrs","title":"3. Connect Decypharr to Arrs","text":"<p>Follow the official usage guide for step-by-step instructions on connecting your Radarr and Sonarr instances to Decypharr.</p> <p>This includes setting the correct API keys and ensuring URL paths match the container environments.</p>"},{"location":"services/core/decypharr/#4-plex-library-setup","title":"4. Plex Library Setup","text":"<p>In Plex, add the Decypharr symlink folders as library sources:</p> <ul> <li>Movies Library: <code>/mnt/debrid/decypharr_symlinks/movies</code></li> <li>TV Shows Library: <code>/mnt/debrid/decypharr_symlinks/shows</code></li> </ul> <p>This ensures Plex indexes files processed and renamed by Decypharr, enabling clean and consistent playback.</p>"},{"location":"services/core/decypharr/#-troubleshooting-tips","title":"\ud83d\udee0\ufe0f Troubleshooting Tips","text":"<ul> <li>Ensure the bind mounts are correct and both containers see the same <code>/mnt/debrid</code> structure</li> <li>Make sure Decypharr has permission to write to and create symlinks in the target directory</li> <li>If media doesn't appear in Plex, check that the symlink folders are scanned and indexed</li> <li>Use <code>docker inspect</code> to verify correct mount propagation between DUMB and Arrs</li> </ul>"},{"location":"services/core/decypharr/#-supported-debrid-providers","title":"\ud83c\udf10 Supported Debrid Providers","text":"<ul> <li>Real Debrid</li> <li>Torbox</li> <li>Debrid Link</li> <li>All Debrid</li> </ul>"},{"location":"services/core/decypharr/#-resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>Decypharr GitHub</li> <li>Decypharr Docs</li> </ul>"},{"location":"services/core/plex-media-server/","title":"Plex Media Server (Core Service)","text":"<p>Plex Media Server serves as the centralized media host for the DUMB ecosystem. It enables playback of collected media through a wide range of client devices and integrates seamlessly with DUMB core orchestrators like Riven, CLI Debrid, Plex Debrid, and Decypharr.</p>"},{"location":"services/core/plex-media-server/#-service-relationships","title":"\ud83d\udd17 Service Relationships","text":"Classification Role Core Service Media Server / Playback Host Depends On Optional None Exposes UI Yes (Web UI on port 32400)"},{"location":"services/core/plex-media-server/#-configuration-in-dumb_configjson","title":"\ud83d\udce6 Configuration in <code>dumb_config.json</code>","text":"<pre><code>\"plex\": {\n  \"enabled\": false,\n  \"process_name\": \"Plex Media Server\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"port\": 32400,\n  \"auto_update\": false,\n  \"auto_update_interval\": 24,\n  \"config_dir\": \"/plex\",\n  \"config_file\": \"/plex/Plex Media Server/Preferences.xml\",\n  \"log_file\": \"/plex/Plex Media Server/Logs/Plex Media Server.log\",\n  \"plex_claim\": \"\",\n  \"friendly_name\": \"DUMB\",\n  \"command\": [],\n  \"env\": {}\n}\n</code></pre>"},{"location":"services/core/plex-media-server/#-key-configuration-fields","title":"\ud83d\udd0d Key Configuration Fields","text":"<ul> <li><code>enabled</code>: Toggle Plex Media Server on or off.</li> <li><code>plex_claim</code>: Plex claim token for initial server registration.</li> <li><code>friendly_name</code>: The name that appears in the Plex Web App and on local clients.</li> <li><code>config_dir</code>: Directory containing Plex server data (including preferences).</li> <li><code>port</code>: Default access port (32400).</li> </ul>"},{"location":"services/core/plex-media-server/#-setup--behavior","title":"\u2699\ufe0f Setup &amp; Behavior","text":""},{"location":"services/core/plex-media-server/#-requirements","title":"\ud83e\uddf0 Requirements","text":"<ul> <li> <p>Plex must have access to:</p> </li> <li> <p>Media directories (local or rclone-mounted).</p> </li> <li>Transcoding cache (if transcoding is enabled).</li> <li>Valid claim token for first-time setup (if not already configured).</li> </ul>"},{"location":"services/core/plex-media-server/#hardware-transcoding","title":"Hardware Transcoding","text":"<p>Hardware-accelerated streaming enables Plex to use the GPU or specialized hardware encoders to offload and speed up transcoding operations, significantly improving performance and lowering CPU usage.</p> <p>Plex Pass Required</p> <p>Hardware-accelerated transcoding is a premium feature and requires an active Plex Pass subscription. Learn more</p>"},{"location":"services/core/plex-media-server/#-docker-setup-for-hardware-transcoding","title":"\ud83e\uddea Docker Setup for Hardware Transcoding","text":"<p>To enable hardware transcoding in a Docker container:</p> <pre><code>devices:\n  - /dev/dri:/dev/dri\n</code></pre> <p>This grants the container access to the host system's Direct Rendering Infrastructure (DRI), which is required for GPU access (e.g., Intel Quick Sync, NVIDIA NVENC).</p>"},{"location":"services/core/plex-media-server/#intel-quick-sync-users","title":"Intel Quick Sync Users","text":"<p>Additional permissions may be needed:</p> <pre><code>group_add:\n  - \"992\"  # Typically 'render' group\n  - \"993\"  # Some systems require both 'render' and 'video'\n</code></pre> <p>You can confirm the group IDs for your system by running:</p> <pre><code>getent group video\ngetent group render\n</code></pre> <p>Make sure the Plex container runs with appropriate <code>PUID</code> and <code>PGID</code> values that also have access to <code>/dev/dri</code>.</p>"},{"location":"services/core/plex-media-server/#-enabling-in-plex-settings","title":"\u2699\ufe0f Enabling in Plex Settings","text":"<p>Once the container is running and hardware access is configured:</p> <ol> <li>Go to the Plex Web UI: <code>http://&lt;host&gt;:32400/web</code></li> <li>Navigate to: Settings &gt; Transcoder</li> <li>Enable the checkbox: Use hardware acceleration when available</li> <li>(Optional) Enable Use hardware-accelerated video encoding for encoding tasks.</li> </ol>"},{"location":"services/core/plex-media-server/#-confirming-hardware-transcoding-is-active","title":"\u2705 Confirming Hardware Transcoding is Active","text":"<p>When a video is playing:</p> <ol> <li>Click the three dots next to the playback and choose Stats for Nerds</li> <li>Look for entries like <code>hw</code> or <code>h264_qsv</code> or <code>nvenc</code> which indicate hardware acceleration.</li> <li>Alternatively, open the Server Dashboard during playback and check the stream status for an <code>(hw)</code> label next to the transcoding type.</li> </ol> <p>Troubleshooting</p> <p>If hardware transcoding does not activate:</p> <pre><code>* Ensure your hardware supports it (Intel iGPU, NVIDIA GPU with driver support, etc.)\n* Check if `/dev/dri` exists and is mounted into the container\n* Review container logs and Plex logs for errors related to transcoding\n* Confirm Plex Pass is active and the account used in Plex is signed in and authorized\n</code></pre>"},{"location":"services/core/plex-media-server/#-how-to-start","title":"\ud83d\udee0\ufe0f How to Start","text":""},{"location":"services/core/plex-media-server/#utilize-the-onboarding-process","title":"Utilize the onboarding process","text":"<p>The onboarding process can be re-launched from the DUMB Frontend settings menu</p> <ol> <li>Onboarding will prompt for the Plex Claim Token.</li> <li> <p>Onboarding will optionally prompt for your Plex Token. If provided, this enables:</p> <ul> <li>Enhanced functionality for Plex Pass members (e.g., downloads)</li> <li>Preconfigured integration with other core services like Riven and CLI Debrid</li> </ul> </li> </ol>"},{"location":"services/core/plex-media-server/#manually","title":"Manually","text":"<ol> <li>Ensure the <code>plex</code> block is properly configured in <code>dumb_config.json</code>.</li> <li>Provide a <code>plex_claim</code> token if starting fresh.</li> <li>Start the container with DUMB orchestration, or manually start the Plex service.</li> <li>Access via: <code>http://&lt;host&gt;:32400/web</code></li> </ol>"},{"location":"services/core/plex-media-server/#-integration-with-other-services","title":"\ud83e\udde9 Integration with Other Services","text":"<p>Plex is designed to serve content collected and maintained by core DUMB services including Riven, CLI Debrid, Plex Debrid, and Decypharr. These services fetch, organize, and optionally symlink media content into the mounted directory used by Plex.</p> <p>By default, media content is made available inside the container at <code>/mnt/debrid</code> through rclone mounts.</p> <ul> <li>Core services populate <code>/mnt/debrid</code> with downloaded or upgraded content.</li> <li>Plex scans this location to index and serve the media.</li> </ul> <p>If you want to serve media from the host system, bind mount your local media directory into the container and add it as a library path in Plex.</p>"},{"location":"services/core/plex-media-server/#-access","title":"\ud83c\udf10 Access","text":"<ul> <li>URL: <code>http://&lt;host&gt;:32400/web</code></li> <li>Credentials: Managed through Plex.tv account</li> </ul>"},{"location":"services/core/plex-media-server/#-mount-and-path-planning","title":"\ud83d\udcc1 Mount and Path Planning","text":"<p>Ensure your media storage is accessible to Plex via the correct container path.</p> <ul> <li>Default internal mount: <code>/mnt/debrid</code></li> <li>Add bind mounts: for local media stored on the host machine not managed by DUMB.</li> </ul>"},{"location":"services/core/plex-media-server/#-tips-and-troubleshooting","title":"\ud83e\uddea Tips and Troubleshooting","text":"<ul> <li>If the container fails to start due to permissions, ensure Plex has proper access to its <code>config_dir</code> and media directories.</li> <li>Use <code>PUID</code> and <code>PGID</code> to match host user permissions.</li> <li>Logs can be viewed directly from the DUMB Frontend.</li> <li>You can also start, stop, restart Plex, and modify the <code>dumb_config.json</code> or Plex <code>Preferences.xml</code> from the DUMB Frontend interface.</li> </ul>"},{"location":"services/core/plex-media-server/#-resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>Plex Official Site</li> <li>Plex Claim Token Page</li> <li>Plex Support</li> </ul>"},{"location":"services/core/riven-backend/","title":"Riven Backend Configuration","text":"<p>The Riven Backend is the core component responsible for data handling, automation, API integrations, and scraping within the Riven ecosystem. Proper configuration ensures seamless integration with services like Overseerr, Plex, and Trakt.</p>"},{"location":"services/core/riven-backend/#configuration-settings-in-dumb_configjson","title":"Configuration Settings in <code>dumb_config.json</code>","text":"<pre><code>\"riven_backend\": {\n    \"enabled\": false,\n    \"process_name\": \"Riven Backend\",\n    \"repo_owner\": \"rivenmedia\",\n    \"repo_name\": \"riven\",\n    \"release_version_enabled\": false,\n    \"release_version\": \"v0.20.1\",\n    \"branch_enabled\": false,\n    \"branch\": \"release-please--branches--main\",\n    \"suppress_logging\": false,\n    \"log_level\": \"INFO\",\n    \"host\": \"127.0.0.1\",\n    \"port\": 8080,\n    \"auto_update\": false,\n    \"auto_update_interval\": 24,\n    \"symlink_library_path\": \"/mnt/debrid/riven_symlinks\",\n    \"clear_on_update\": true,\n    \"exclude_dirs\": [\n        \"/riven/backend/data\"\n    ],\n    \"env_copy\": {\n        \"source\": \"/riven/backend/data/.env\",\n        \"destination\": \"/riven/backend/src/.env\"\n    },\n    \"platforms\": [\n        \"python\"\n    ],\n    \"command\": [\n        \"/riven/backend/venv/bin/python\",\n        \"src/main.py\",\n        \"-p\",\n        \"{port}\"\n    ],\n    \"config_dir\": \"/riven/backend\",\n    \"config_file\": \"/riven/backend/data/settings.json\",\n    \"env\": {},\n    \"wait_for_dir\": \"\"\n},\n</code></pre>"},{"location":"services/core/riven-backend/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the Riven Backend service.</li> <li><code>process_name</code>: Used in logs and process tracking.</li> <li><code>host</code>: IP address for the backend to listen on.</li> <li><code>port</code>: Port exposed for the API.</li> <li><code>repo_owner</code> / <code>repo_name</code>: GitHub repo to pull from.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Use a tagged release if enabled.</li> <li><code>branch_enabled</code> / <code>branch</code>: Use a specific branch if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address the backend should bind to.</li> <li><code>port</code>: Port the backend API is served on.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>symlink_library_path</code>: Target path for media symlinks.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>env_copy</code>: Copies a <code>.env</code> file from one location to another. Such as the Riven .env discussed below</li> <li><code>platforms</code>: Expected runtime environment (e.g., <code>python</code>).</li> <li><code>command</code>: How the service is started.</li> <li><code>config_dir</code> / <code>config_file</code>: Configuration directory and settings file.</li> <li><code>env</code>: Dictionary of environment variables passed to the process.</li> <li><code>wait_for_dir</code>: Delays startup until the specified directory exists.</li> </ul>"},{"location":"services/core/riven-backend/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of the backend is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/core/riven-backend/#-initial-setup-riven-backend","title":"\u2699\ufe0f Initial Setup: Riven Backend","text":"<p>Before Riven Backend can be used, initial configuration is required.</p> <p>After completing the DUMB onboarding, navigate to the Riven Frontend and open the <code>Settings</code> page. The following sections should be reviewed and updated:</p>"},{"location":"services/core/riven-backend/#-required-configuration","title":"\ud83d\udd27 Required Configuration","text":"<p>At a minimum, enable at least one Content source under the <code>Content</code> section. Without this, Riven cannot function.</p>"},{"location":"services/core/riven-backend/#-recommended-setup-areas","title":"\ud83e\udde9 Recommended Setup Areas","text":"<ul> <li>General \u2013 Adjust base settings like min/max files size, etc.</li> <li>Media Server \u2013 Add your Plex, Jellyfin, or Emby server details for library syncing.</li> <li>Content \u2013 Configure sources such as Trakt, Overseerr, or the Plex Watchlist, MDB List, Listrr.</li> <li>Scrapers \u2013 Enable one or more scrapers (e.g., Zilean, Torrentio, Knightcrawler, Orionoid, Jackett, Mediafusion, Prowlarr, Comet).</li> <li>Ranking \u2013 Customize how results are scored and filtered.</li> </ul> <p>\ud83d\udcdd Once complete, Riven will begin processing requests based on the selected sources and configurations.</p>"},{"location":"services/core/riven-backend/#rivens-environment-variables-in-the-envexample","title":"Riven's Environment Variables in the <code>.env.example</code>","text":"<p>The <code>.env.example</code> file includes:</p> <ul> <li><code>RIVEN_FORCE_ENV</code>: Forces env vars to override <code>settings.json</code>.</li> <li><code>SETTINGS_FILENAME</code>: Specifies the settings file name.</li> <li><code>SKIP_TRAKT_CACHE</code>: Skips cached results.</li> <li><code>HARD_RESET</code>: Drops and recreates all database tables.</li> <li><code>REPAIR_SYMLINKS</code>: Fixes any broken symlinks.</li> <li><code>API_KEY</code>: Custom static API key.</li> <li><code>WORKERS</code>: Number of indexing workers.</li> </ul> <p>Each Riven env can also be set within DUMB, either through the \"env\" section of the \"riven_backend\" within the <code>dumb_config.json</code>, or buy utilizing methods defined in the Configuration section of the docs.</p> <p>View full example on GitHub</p>"},{"location":"services/core/riven-backend/#additional-resources","title":"Additional Resources","text":"<ul> <li>Riven Wiki</li> <li>Riven GitHub Repository</li> </ul>"},{"location":"services/dependent/","title":"Dependent Services","text":"<p>Dependent services are essential building blocks required by one or more core services to operate correctly. These services do not perform media automation on their own but provide critical functionality like mounting, database storage, or metadata enrichment.</p>"},{"location":"services/dependent/#-what-are-dependent-services","title":"\u2699\ufe0f What Are Dependent Services?","text":"<p>A service is considered dependent if:</p> <ul> <li>It must be running before a core service can start successfully</li> <li>It provides a shared capability such as metadata, storage, or content mounting</li> </ul>"},{"location":"services/dependent/#-dependent-service-index","title":"\ud83e\uddf1 Dependent Service Index","text":"Service Description Required By CLI Battery Metadata and Trakt integration layer for CLI Debrid CLI Debrid Phalanx DB Distributed metadata store for CLI Debrid CLI Debrid (optional but often used) PostgreSQL Central database used by Riven, Zilean, pgAdmin Riven, Zilean, pgAdmin rclone Mounts Debrid cloud storage via WebDAV CLI Debrid, Riven, Decypharr, Plex Debrid Zurg Debrid-backed WebDAV provider for use with rclone CLI Debrid, Riven, Plex Debrid"},{"location":"services/dependent/#-how-they-work","title":"\ud83d\udd17 How They Work","text":"<p>Dependent services act as building blocks \u2014 either providing runtime resources or exposing interfaces used by core services.</p> <p>For example:</p> <ul> <li>CLI Battery must start before CLI Debrid or scraping will fail.</li> <li>PostgreSQL must start before Riven, Zilean, or pgAdmin </li> <li>rclone must be active to expose the debrid content as a mounted file system to facilitate symlink creation or raw file use.</li> <li>Zurg must run if rclone is configured to use its WebDAV endpoint.</li> </ul>"},{"location":"services/dependent/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>These services are typically auto-launched when their associated core service starts</li> <li>Avoid disabling them manually unless you're sure the core service won't need them</li> <li>Check logs for startup dependency errors if a core service fails to launch</li> </ul>"},{"location":"services/dependent/#-related-pages","title":"\ud83d\udcda Related Pages","text":"<ul> <li>Core Services</li> <li>Optional Services</li> <li>How Services Work Together</li> </ul>"},{"location":"services/dependent/cli-battery/","title":"CLI Battery Configuration","text":"<p>The CLI Battery is a Flask-based companion application required by CLI Debrid. It provides metadata services and background processing, integrating with Trakt and exposing a lightweight web API for managing movies and TV shows. This service must be running for CLI Debrid to operate properly.</p>"},{"location":"services/dependent/cli-battery/#configuration-settings-in-dumb_configjson","title":"Configuration Settings in <code>dumb_config.json</code>","text":"<pre><code>\"cli_battery\": {\n  \"enabled\": false,\n  \"process_name\": \"CLI Battery\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"port\": 5001,\n  \"platforms\": [\"python\"],\n  \"command\": [\n    \"/cli_debrid/venv/bin/python\",\n    \"cli_battery/main.py\"\n  ],\n  \"config_dir\": \"/cli_debrid\",\n  \"config_file\": \"/cli_debrid/data/config/settings.json\",\n  \"log_file\": \"/cli_debrid/data/logs/battery_debug.log\",\n  \"env\": {\n    \"USER_CONFIG\": \"/cli_debrid/data/config/\",\n    \"USER_LOGS\": \"/cli_debrid/data/logs/\",\n    \"USER_DB_CONTENT\": \"/cli_debrid/data/db_content/\",\n    \"CLI_DEBRID_BATTERY_PORT\": \"{port}\"\n  }\n},\n</code></pre>"},{"location":"services/dependent/cli-battery/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Enables the CLI Battery service.</li> <li><code>process_name</code>: Display name in logs and process manager.</li> <li><code>suppress_logging</code>: Suppresses CLI Battery logs in the main DUMB output.</li> <li><code>log_level</code>: Controls verbosity of logging.</li> <li><code>port</code>: CLI Battery service port.</li> <li><code>command</code>: How the service is started.</li> <li><code>config_dir</code> / <code>config_file</code>: Configuration paths used by the battery.</li> <li><code>log_file</code>: Path to the CLI Battery log file.</li> <li><code>env</code>: Environment variables passed to the subprocess.</li> </ul>"},{"location":"services/dependent/cli-battery/#-required-by-cli-debrid","title":"\u26a0\ufe0f Required by CLI Debrid","text":"<p>CLI Battery must be running before CLI Debrid launches, as the latter depends on it for coordination and metadata resolution.</p>"},{"location":"services/dependent/cli-battery/#-web-interface--api","title":"\ud83c\udf10 Web Interface &amp; API","text":"<p>CLI Battery is a Flask web app exposing a browser UI and REST API:</p>"},{"location":"services/dependent/cli-battery/#-web-dashboard","title":"\ud83d\udcca Web Dashboard","text":"<ul> <li><code>/</code> \u2014 Home dashboard with metadata stats</li> <li><code>/debug</code> \u2014 Debug view of all metadata items</li> <li><code>/metadata</code> \u2014 Full metadata list</li> <li><code>/providers</code> \u2014 Enable/disable metadata providers</li> <li><code>/settings</code> \u2014 View and update settings</li> </ul>"},{"location":"services/dependent/cli-battery/#-api-endpoints","title":"\ud83d\udd0c API Endpoints","text":"<ul> <li><code>/api/metadata/&lt;imdb_id&gt;</code> \u2014 Fetch metadata for a specific movie or show</li> <li><code>/api/seasons/&lt;imdb_id&gt;</code> \u2014 Fetch seasons for a show</li> <li><code>/authorize_trakt</code> \u2014 Start Trakt OAuth authorization</li> <li><code>/trakt_callback</code> \u2014 Handle the Trakt OAuth callback</li> </ul>"},{"location":"services/dependent/cli-battery/#-access","title":"\ud83c\udf10 Access","text":"<ul> <li>Navigate to: <code>http://&lt;host&gt;:&lt;port&gt;</code> <ul> <li>default port <code>5001</code></li> </ul> </li> </ul>"},{"location":"services/dependent/cli-battery/#additional-resources","title":"Additional Resources","text":"<ul> <li>CLI Debrid GitHub Repository</li> <li>CLI Battery Source Code</li> </ul>"},{"location":"services/dependent/phalanx-db/","title":"Phalanx DB Configuration","text":"<p>Phalanx DB is an optional decentralized metadata service that can enhance CLI Debrid by providing distributed data capabilities through Hyperswarm. It runs independently and is not required for CLI Debrid to function.</p>"},{"location":"services/dependent/phalanx-db/#configuration-settings-in-dumb_configjson","title":"Configuration Settings in <code>dumb_config.json</code>","text":"<pre><code>\"phalanx_db\": {\n  \"enabled\": false,\n  \"process_name\": \"Phalanx DB\",\n  \"repo_owner\": \"godver3\",\n  \"repo_name\": \"phalanx_db_hyperswarm\",\n  \"release_version_enabled\": false,\n  \"release_version\": \"v0.50\",\n  \"branch_enabled\": false,\n  \"branch\": \"main\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"port\": 8888,\n  \"auto_update\": false,\n  \"auto_update_interval\": 24,\n  \"clear_on_update\": true,\n  \"exclude_dirs\": [\n    \"/phalanx_db/data\"\n  ],\n  \"platforms\": [\"pnpm\"],\n  \"command\": [\"node\", \"phalanx_db_rest.js\"],\n  \"config_dir\": \"/phalanx_db\",\n  \"env\": {}\n},\n</code></pre>"},{"location":"services/dependent/phalanx-db/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Enables or disables Phalanx DB.</li> <li><code>process_name</code>: Label used for logging and monitoring.</li> <li><code>repo_owner</code> / <code>repo_name</code>: Source GitHub repo for updates.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Targets a specific version release.</li> <li><code>branch_enabled</code> / <code>branch</code>: If true, uses a GitHub branch instead of a release.</li> <li><code>suppress_logging</code>: Suppresses logs from this service.</li> <li><code>log_level</code>: Verbosity level.</li> <li><code>port</code>: Port Phalanx DB listens on.</li> <li><code>auto_update</code> / <code>auto_update_interval</code>: Pull latest changes from GitHub.</li> <li><code>clear_on_update</code> / <code>exclude_dirs</code>: Defines cleanup behavior and ignored folders.</li> <li><code>platforms</code>: Required runtime (usually <code>pnpm</code> + Node).</li> <li><code>command</code>: Startup command.</li> <li><code>config_dir</code>: Root directory for the config and runtime files.</li> <li><code>env</code>: Environment variables (if any).</li> </ul>"},{"location":"services/dependent/phalanx-db/#-when-to-use","title":"\ud83e\uddea When to Use","text":"<p>Phalanx DB is beneficial if you want to:</p> <ul> <li>Store metadata in a decentralized way</li> <li>Leverage peer-to-peer syncing of release data</li> <li>Enable extended features in CLI Debrid when Phalanx DB is active</li> </ul> <p>This service is optional and should only be enabled if you intend to use its distributed storage model.</p>"},{"location":"services/dependent/phalanx-db/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/dependent/phalanx-db/#additional-resources","title":"Additional Resources","text":"<ul> <li>Phalanx DB GitHub Repository</li> </ul>"},{"location":"services/dependent/postgres/","title":"PostgreSQL","text":"<p>PostgreSQL is the core database system used by DUMB to store metadata and internal configuration for services like Riven, Zilean, and pgAdmin. </p> <p>It is pre-installed and automatically initialized during container startup.</p>"},{"location":"services/dependent/postgres/#-configuration-settings-in-dumb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dumb_config.json</code>","text":"<pre><code>\"postgres\": {\n  \"enabled\": false,\n  \"process_name\": \"PostgreSQL\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"host\": \"127.0.0.1\",\n  \"port\": 5432,\n  \"shared_buffers\": \"128MB\",\n  \"max_connections\": 100,\n  \"databases\": [\n    { \"name\": \"postgres\", \"enabled\": true },\n    { \"name\": \"pgadmin\", \"enabled\": true },\n    { \"name\": \"zilean\", \"enabled\": true },\n    { \"name\": \"riven\", \"enabled\": true }\n  ],\n  \"config_dir\": \"/postgres_data\",\n  \"config_file\": \"/postgres_data/postgresql.conf\",\n  \"initdb_args\": \"--data-checksums\",\n  \"user\": \"DUMB\",\n  \"password\": \"postgres\",\n  \"shared_buffers\": \"128MB\",\n  \"max_connections\": 100,\n  \"run_directory\": \"/run/postgresql\",\n  \"command\": \"postgres -D {postgres_config_dir} -c config_file={postgres_config_file}\",\n  \"env\": {}\n},\n</code></pre>"},{"location":"services/dependent/postgres/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the PostgreSQL service.</li> <li><code>process_name</code>: The label used in logs and process tracking.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address for PostgreSQL to listen on.</li> <li><code>port</code>: Port exposed for the PostgreSQL server.</li> <li><code>shared_buffers</code> \u2013 Amount of memory allocated to PostgreSQL.</li> <li><code>max_connections</code> \u2013 Maximum simultaneous database connections.</li> <li><code>databases</code> \u2013 List of databases to initialize, with each entry containing:<ul> <li><code>name</code> \u2013 Name of the database.</li> <li><code>enabled</code> \u2013 Whether this database should be created.</li> </ul> </li> <li><code>config_dir</code> \u2013 Directory where PostgreSQL configuration files are stored.</li> <li><code>config_file</code> \u2013 Path to the primary PostgreSQL configuration file.</li> <li><code>initdb_args</code> \u2013 Additional arguments passed to initdb during database initialization.</li> <li><code>user/password</code> \u2013 Default database credentials.</li> <li><code>run_directory</code> \u2013 Directory where PostgreSQL runtime files (like sockets) are stored.</li> <li><code>command</code> \u2013 The command used to start PostgreSQL.</li> <li><code>env</code> \u2013 Dictionary of environment variables passed to the process.</li> </ul>"},{"location":"services/dependent/postgres/#-access--credentials","title":"\ud83d\udeaa Access &amp; Credentials","text":"<ul> <li>Default Port: <code>5432</code></li> <li>Default User: <code>DUMB</code></li> <li>Default Password: <code>postgres</code></li> <li>Default Databases:<ul> <li><code>postgres</code></li> <li><code>pgadmin</code></li> <li><code>zilean</code></li> <li><code>riven</code></li> </ul> </li> </ul> <p>\ud83d\udd10 Override any of the above using <code>POSTGRES_USER</code>, <code>POSTGRES_PASSWORD</code>, or <code>POSTGRES_DB</code> environment variables.</p>"},{"location":"services/dependent/postgres/#-data--config-paths","title":"\ud83d\udcc1 Data &amp; Config Paths","text":"Purpose Path Data Directory <code>/postgres_data</code> Config File <code>/postgres_data/postgresql.conf</code> Runtime Directory <code>/run/postgresql</code>"},{"location":"services/dependent/postgres/#-useful-commands","title":"\ud83e\udde0 Useful Commands","text":""},{"location":"services/dependent/postgres/#-run-sql-command-directly-one-liner","title":"\ud83d\udce6 Run SQL Command Directly (one-liner)","text":"<pre><code>docker exec -it DUMB psql -U DUMB -d riven -c 'SELECT COUNT(*) FROM media;'\n</code></pre>"},{"location":"services/dependent/postgres/#-enter-the-container--postgresql-shell","title":"\ud83e\udded Enter the Container &amp; PostgreSQL Shell","text":"<pre><code>docker exec -it DUMB /bin/bash\npsql -U DUMB -d riven\n</code></pre>"},{"location":"services/dependent/postgres/#-drop-the-riven-database","title":"\ud83d\uddd1\ufe0f Drop the Riven Database","text":"<p>This will permanently delete the Riven database. Be sure you\u2019ve backed up anything important.</p> <p>From the host (one-liner): <pre><code>docker exec -it DUMB psql -U DUMB -c 'DROP DATABASE riven;'\n</code></pre></p> <p>From inside the container: <pre><code>docker exec -it DUMB /bin/bash\npsql -U DUMB\nDROP DATABASE riven;\n</code></pre></p>"},{"location":"services/dependent/postgres/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Always restart the container after modifying config files in <code>/postgres_data</code>.</li> <li>Ensure you mount <code>/postgres_data</code> if you want persistent databases.</li> <li>pgAdmin is the easiest way to visually explore and manage PostgreSQL.</li> </ul>"},{"location":"services/dependent/postgres/#-more-info","title":"\ud83d\udcda More Info","text":"<ul> <li>PostgreSQL Documentation</li> </ul>"},{"location":"services/dependent/rclone/","title":"rclone","text":"<p>rclone is a command-line tool used in DUMB to mount cloud storage\u2014specifically Debrid services like Real-Debrid\u2014into the container as a local file system. It works in tandem with Zurg and is configured automatically during container startup.</p>"},{"location":"services/dependent/rclone/#-configuration-settings-in-dumb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dumb_config.json</code>","text":"<p>Each <code>rclone</code> instance is defined under the <code>rclone.instances</code> section in <code>dumb_config.json</code>. Example: <pre><code>\"rclone\": {\n  \"instances\": {\n    \"RealDebrid\": {\n      \"enabled\": true,\n      \"process_name\": \"rclone w/ RealDebrid\",\n      \"suppress_logging\": false,\n      \"log_level\": \"INFO\",\n      \"key_type\": \"RealDebrid\",\n      \"zurg_enabled\": true,\n      \"mount_dir\": \"/data\",\n      \"mount_name\": \"rclone_RD\",\n      \"cache_dir\": \"/cache\",\n      \"config_dir\": \"/config\",\n      \"config_file\": \"/config/rclone.config\",\n      \"zurg_config_file\": \"/zurg/RD/config.yml\",\n      \"command\": [],\n      \"api_key\": \"\"\n    }\n  }\n},\n</code></pre></p>"},{"location":"services/dependent/rclone/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether this rclone instance should be started.</li> <li><code>process_name</code>: The label used in logs and process tracking.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>key_type</code>: The debrid service to use (<code>RealDebrid</code>, <code>AllDebrid</code>, etc.).</li> <li><code>zurg_enabled</code>: Whether Zurg is linked to this rclone mount.</li> <li><code>mount_dir</code>: The container path where the remote drive is to be mounted.</li> <li><code>mount_name</code>: The rclone remote name.</li> <li><code>cache_dir</code>: Directory used by rclone for VFS caching, when enabled.</li> <li><code>config_dir</code>: Directory where the rclone config file is stored.</li> <li><code>config_file</code>: Full path to the rclone configuration file.</li> <li><code>zurg_config_file</code>: Full path to the Zurg config file for this instance.</li> <li><code>command</code>: Custom CLI arguments to be appended to rclone at runtime.</li> <li><code>api_key</code>: (Optional) Debrid API key, used if Zurg is not linked.</li> </ul>"},{"location":"services/dependent/rclone/#-api-key-behavior","title":"\ud83d\udd01 API Key Behavior","text":"<ul> <li>If <code>zurg_enabled</code> &amp; <code>zurg_config_file</code> are set: DUMB will configure rclone to use Zurg's WebDAV endpoint. The API key should be defined in the Zurg instance, not the rclone one.</li> <li>If <code>zurg_enabled</code> &amp; <code>zurg_config_file</code> are unset or blank: (Future release) DUMB will configure rclone to directly connect to the debrid service, and the API key must be set in the rclone instance.</li> </ul>"},{"location":"services/dependent/rclone/#-adding-more-instances","title":"\u2795 Adding More Instances","text":"<p>Users can define additional rclone instances by duplicating the structure and ensuring:</p> <ul> <li>Each <code>instance name</code> is unique</li> <li>Each <code>process_name</code> is unique</li> <li>The <code>key_type</code> must match the type of Debrid service used (e.g., <code>RealDebrid</code>, <code>AllDebrid</code>, <code>TorBox</code>, <code>Premiumize</code>)</li> </ul> <p>Example: <pre><code>\"rclone\": {\n  \"instances\": {\n    \"RealDebrid\": {\n      \"enabled\": true,\n      \"process_name\": \"rclone w/ RealDebrid\",\n      \"suppress_logging\": false,\n      \"log_level\": \"INFO\",\n      \"key_type\": \"RealDebrid\",\n      \"zurg_enabled\": true,\n      \"mount_dir\": \"/data\",\n      \"mount_name\": \"rclone_RD\",\n      \"cache_dir\": \"/cache\",\n      \"config_dir\": \"/config\",\n      \"config_file\": \"/config/rclone.config\",\n      \"zurg_config_file\": \"/zurg/RD/config.yml\",\n      \"command\": [],\n      \"api_key\": \"\"\n    },    \n    \"AllDebrid\": {\n      \"enabled\": false,\n      \"process_name\": \"rclone w/ AllDebrid\",\n      \"suppress_logging\": false,\n      \"log_level\": \"INFO\",\n      \"key_type\": \"AllDebrid\",\n      \"zurg_enabled\": false,\n      \"mount_dir\": \"/data\",\n      \"mount_name\": \"rclone_AD\",\n      \"cache_dir\": \"/cache\",\n      \"config_dir\": \"/config\",\n      \"config_file\": \"/config/rclone.config\",\n      \"zurg_config_file\": \"\",\n      \"command\": [],\n      \"api_key\": \"\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"services/dependent/rclone/#-features-enabled-by-dumb","title":"\ud83e\udde0 Features Enabled by DUMB","text":""},{"location":"services/dependent/rclone/#-auto-generated-rcloneconfig","title":"\ud83d\udd04 Auto-Generated <code>rclone.config</code>","text":"<p>DUMB generates the required <code>rclone.config</code> file at runtime. This includes: <pre><code>[rclone_RD]\ntype = webdav\nurl = http://localhost:9999/dav\nvendor = other\npacer_min_sleep = 0\n</code></pre> This eliminates the need for any manual setup.</p>"},{"location":"services/dependent/rclone/#-debrid-api-integration","title":"\ud83d\udd12 Debrid API Integration","text":"<p>DUMB supports multiple Debrid configurations (Future release) using a combination of <code>rclone</code> and <code>zurg</code> instances.</p>"},{"location":"services/dependent/rclone/#-works-with-zurg","title":"\ud83e\uddf2 Works With Zurg","text":"<p>Zurg exposes a WebDAV server which rclone mounts using the configuration above.</p>"},{"location":"services/dependent/rclone/#-rclone-flags-via-environment-variables","title":"\ud83d\udd27 rclone Flags via Environment Variables","text":"<p>All <code>--flag=value</code> options in rclone can be passed as environment variables. Format: <pre><code>RCLONE_&lt;OPTION_NAME_UPPERCASE&gt;=&lt;value&gt;\n</code></pre> Example: <pre><code>RCLONE_VFS_CACHE_MODE=full\nRCLONE_BUFFER_SIZE=64M\nRCLONE_ATTR_TIMEOUT=30s\n</code></pre> This enables advanced control without modifying CLI or config files.</p> <p>For more info, see rclone docs.</p>"},{"location":"services/dependent/rclone/#-optimizing-rclone-for-media-server-usage","title":"\ud83d\udcda Optimizing rclone for Media Server Usage","text":"<p>To improve streaming performance and reduce excessive bandwidth usage when using rclone with media servers (e.g., Plex, Jellyfin, Emby), consider tuning the mount behavior using additional flags.</p> <p>VFS cache will use hard drive space, so ensure you set an appropriate max size for your system</p> <p>You can apply these flags in three ways:</p> <ol> <li> <p>As environment variables in Docker Compose or <code>.env</code> (Recommended):</p> <p>Note</p> <p>Applying the below will make these settings applicable to all rclone instances.</p> <p>If you prefer to apply settings per-instance, then see option 2 or 3.</p> <pre><code>RCLONE_VFS_CACHE_MODE=full\nRCLONE_VFS_READ_CHUNK_SIZE=1M\nRCLONE_VFS_READ_CHUNK_SIZE_LIMIT=32M\nRCLONE_BUFFER_SIZE=64M\nRCLONE_DIR_CACHE_TIME=10s\nRCLONE_VFS_CACHE_MAX_AGE=6h\nRCLONE_VFS_CACHE_MAX_SIZE=100G\nRCLONE_ATTR_TIMEOUT=1s\nRCLONE_TPSLIMIT=10\nRCLONE_TPSLIMIT_BURST=10\n</code></pre> </li> <li> <p>By modifying the <code>command</code> list in the <code>dumb_config.json</code> rclone instance:</p> <p>Note</p> <p>The <code>command</code> field is empty by default (<code>\"command\": []</code>) because DUMB generates the rclone command dynamically during setup and applies it in memory.</p> <p>If you add custom arguments to the <code>command</code> list, it will override the auto-generated defaults. </p> <p>You will be responsible for maintaining all required options, such as <code>--mount-name</code> and <code>--mount-dir</code>. </p> <p>To revert to default behavior, simply clear the field again by setting <code>\"command\": []</code>.</p> <p>Example default command DUMB generates:   <pre><code>\"command\": [\n  \"rclone\",\n  \"mount\",\n  \"rclone_RD:\",\n  \"/data/rclone_RD\",\n  \"--config\", \"/config/rclone.config\",\n  \"--uid=1000\",\n  \"--gid=1000\",\n  \"--allow-other\",\n  \"--poll-interval=0\",\n  \"--dir-cache-time=10s\",\n  \"--allow-non-empty\"\n]\n</code></pre></p> <p>To apply performance optimizations:   <pre><code>\"command\": [\n  \"rclone\",\n  \"mount\",\n  \"rclone_RD:\",\n  \"/data/rclone_RD\",\n  \"--config\", \"/config/rclone.config\",\n  \"--uid=1000\",\n  \"--gid=1000\",\n  \"--allow-other\",\n  \"--poll-interval=0\",\n  \"--dir-cache-time=10s\",\n  \"--allow-non-empty\",\n  \"--vfs-cache-mode=full\",\n  \"--vfs-read-chunk-size=1M\",\n  \"--vfs-read-chunk-size-limit=32M\",\n  \"--buffer-size=64M\",\n  \"--vfs-cache-max-age=6h\",\n  \"--vfs-cache-max-size=100G\",\n  \"--attr-timeout=1s\",\n  \"--tpslimit=10\",\n  \"--tpslimit-burst=10\"\n]\n</code></pre></p> </li> <li> <p>Using the DUMB Frontend to edit the instance config and add these options under <code>command</code>.</p> <ul> <li>Use the \"Apply in Memory\" button to test changes without saving. This temporarily updates the in-memory config.</li> <li>Use the \"Save to File\" button to persist changes to <code>dumb_config.json</code>.</li> <li>After either action, press the \"Restart\" button for the changes to take effect.</li> </ul> </li> </ol>"},{"location":"services/dependent/rclone/#-settings-description","title":"\ud83c\udf10 Settings Description","text":"Setting Value Description <code>--config</code> <code>/config/rclone.config</code> Path to the rclone config file generated by DUMB. <code>--uid</code> <code>1000</code> UID to mount as (Linked to <code>PUID</code>). <code>--gid</code> <code>1000</code> GID to mount as (Linked to <code>PGID</code>). <code>--allow-other</code> (enabled) Allows other processes (like Plex) to access the mount. <code>--poll-interval</code> <code>0</code> Disables polling for changes (not supported by debrid remotes). <code>--dir-cache-time</code> <code>10s</code> Cache directory structure for 10 seconds. <code>--allow-non-empty</code> (enabled) Allows mounting to non-empty directories. <code>--vfs-cache-mode</code> <code>full</code> Allows writing &amp; deletion, necessary for media server interaction. <code>--vfs-read-chunk-size</code> <code>1M</code> Minimizes initial bandwidth usage per file during scans. <code>--vfs-read-chunk-size-limit</code> <code>32M</code> Allows efficient chunking during actual playback. <code>--buffer-size</code> <code>64M</code> Buffers streaming into RAM per open file (adjust to your available RAM). <code>--vfs-cache-max-age</code> <code>6h</code> Removes old cache files to preserve space. <code>--vfs-cache-max-size</code> <code>100G</code> Limits total disk cache size. <code>--attr-timeout</code> <code>1s</code> Prevents stale attribute caching. <code>--tpslimit</code> / <code>--tpslimit-burst</code> <code>10</code> Prevents overwhelming debrid APIs with too many requests."},{"location":"services/dependent/rclone/#-buffer-size-tips","title":"\u26a1 Buffer Size Tips","text":"<p>Adjust <code>--buffer-size</code> based on the system RAM:</p> System RAM Recommended <code>--buffer-size</code> &lt; 4 GB <code>16M</code> 4\u20138 GB <code>32M\u201364M</code> 8\u201316 GB <code>128M\u2013256M</code> &gt; 16 GB <code>256M\u2013512M+</code>"},{"location":"services/dependent/rclone/#-accessing-rclone-inside-the-container","title":"\ud83d\udcbb Accessing rclone Inside the Container","text":"<p>To run rclone commands manually: <pre><code>docker exec -it DUMB /bin/bash\nrclone listremotes\nrclone mount rclone_RD: /mnt/test\n</code></pre></p>"},{"location":"services/dependent/rclone/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Mounts are bind-mounted into the container by default.</li> <li>If you mount <code>/data</code> to the host, you will see all Zurg-fetched content.</li> <li>Use the <code>RCLONE_LOG_LEVEL</code> env var to control verbosity.</li> </ul>"},{"location":"services/dependent/rclone/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>rclone Documentation</li> <li>WebDAV Docs</li> <li>rclone Environment Variables</li> </ul>"},{"location":"services/dependent/zurg/","title":"Zurg","text":"<p>Zurg is the debrid content fetcher that powers file discovery and caching for DUMB. It mounts content made available by debrid services like Real-Debrid and exposes them over WebDAV for rclone to access. Zurg is designed to run quietly in the background and can be configured to run multiple instances.</p> <p>Current Debrid Support</p> <p>As of this posting, Zurg only supports Real-Debrid. Additional debrid services may be supported in future updates.</p>"},{"location":"services/dependent/zurg/#-zurg-repositories","title":"\ud83d\udd00 Zurg Repositories","text":"<p>There are two official Zurg repositories:</p> <ul> <li><code>zurg-testing</code> \u2013 The default public repo used by DUMB. It contains stable builds accessible to all users.</li> <li><code>zurg</code> \u2013 The sponsored-only repo that includes the latest features, nightly builds, and premium support. DUMB can access it by setting the <code>DMB_GITHUB_TOKEN</code> and changing the <code>repo_name</code> to <code>zurg</code>.</li> </ul> <p>See Integration Tokens &amp; Credentials section for details on setting up the <code>DMB_GITHUB_TOKEN</code></p>"},{"location":"services/dependent/zurg/#-configuration-in-dumb_configjson","title":"\u2699\ufe0f Configuration in <code>dumb_config.json</code>","text":"<p>Zurg is configured using the <code>instances</code> model to support multiple debrid services (e.g., RealDebrid, AllDebrid, Premiumize).</p> <pre><code>\"zurg\": {\n  \"instances\": {\n    \"RealDebrid\": {\n      \"enabled\": true,\n      \"process_name\": \"Zurg w/ RealDebrid\",\n      \"repo_owner\": \"debridmediamanager\",\n      \"repo_name\": \"zurg-testing\",\n      \"release_version_enabled\": false,\n      \"release_version\": \"v0.9.3-final\",\n      \"suppress_logging\": false,\n      \"log_level\": \"INFO\",\n      \"host\": \"127.0.0.1\",\n      \"port\": 9090,\n      \"auto_update\": false,\n      \"auto_update_interval\": 1,\n      \"clear_on_update\": false,\n      \"exclude_dirs\": [\"/zurg/RD\"],\n      \"key_type\": \"RealDebrid\",\n      \"config_dir\": \"/zurg/RD\",\n      \"config_file\": \"/zurg/RD/config.yml\",\n      \"command\": \"/zurg/RD/zurg\",\n      \"user\": \"\",\n      \"password\": \"\",\n      \"api_key\": \"\"\n    }\n  }\n}\n</code></pre>"},{"location":"services/dependent/zurg/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the Zurg instance.</li> <li><code>process_name</code>: Label used for log files and process display.</li> <li><code>repo_owner</code> / <code>repo_name</code>: GitHub repo to pull Zurg from.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Use a specific release tag if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code> / <code>port</code>: IP/Port to serve the WebDAV interface.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>key_type</code>: Debrid service this Zurg instance connects to (<code>RealDebrid</code>, <code>AllDebrid</code>, etc).</li> <li><code>config_dir</code> / <code>config_file</code>: Location of the Zurg YAML config.</li> <li><code>command</code>: Full path to the Zurg binary.</li> <li><code>user</code> / <code>password</code>: Optional basic auth credentials for WebDAV.</li> <li><code>api_key</code>: Debrid API key (used by Zurg for account authentication).</li> </ul>"},{"location":"services/dependent/zurg/#-version-targeting","title":"\u2699\ufe0f Version Targeting","text":"<p>You can control which version of Zurg is deployed by setting:</p> <ul> <li><code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/dependent/zurg/#-adding-multiple-zurg-instances","title":"\u2795 Adding Multiple Zurg Instances","text":"<p>You can define additional instances in the same <code>zurg.instances</code> block by copying the structure and:</p> <ul> <li>Each <code>instance name</code> is unique</li> <li>Each <code>process_name</code> is unique</li> <li>Each <code>config_dir</code> is unique</li> <li>Each <code>port</code> is unique</li> <li>The <code>key_type</code> must match the type of Debrid service used - Limited to <code>RealDebrid</code> until Zurg adds support for others</li> </ul> <p>Example: <pre><code>\"zurg\": {\n    \"instances\": {\n        \"RealDebrid\": {\n            \"enabled\": true,\n            \"process_name\": \"Zurg w/ RealDebrid\",\n            \"repo_owner\": \"debridmediamanager\",\n            \"repo_name\": \"zurg-testing\",\n            \"release_version_enabled\": false,\n            \"release_version\": \"v0.9.3-final\",\n            \"suppress_logging\": false,\n            \"log_level\": \"INFO\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 9090,\n            \"auto_update\": false,\n            \"auto_update_interval\": 1,\n            \"clear_on_update\": false,\n            \"exclude_dirs\": [\"/zurg/RD\"],\n            \"key_type\": \"RealDebrid\",\n            \"config_dir\": \"/zurg/RD\",\n            \"config_file\": \"/zurg/RD/config.yml\",\n            \"command\": \"/zurg/RD/zurg\",\n            \"user\": \"\",\n            \"password\": \"\",\n            \"api_key\": \"\"\n        },\n        \"RealDebrid_2\": {\n            \"enabled\": true,\n            \"process_name\": \"Zurg w/ RealDebrid 2\",\n            \"repo_owner\": \"debridmediamanager\",\n            \"repo_name\": \"zurg-testing\",\n            \"release_version_enabled\": false,\n            \"release_version\": \"v0.9.3-final\",\n            \"suppress_logging\": false,\n            \"log_level\": \"INFO\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 9091,\n            \"auto_update\": false,\n            \"auto_update_interval\": 1,\n            \"clear_on_update\": false,\n            \"exclude_dirs\": [\"/zurg/RD2\"],\n            \"key_type\": \"RealDebrid\",\n            \"config_dir\": \"/zurg/RD2\",\n            \"config_file\": \"/zurg/RD2/config.yml\",\n            \"command\": \"/zurg/RD2/zurg\",\n            \"user\": \"\",\n            \"password\": \"\",\n            \"api_key\": \"\"\n        }            \n    }\n}    \n</code></pre></p>"},{"location":"services/dependent/zurg/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>The Zurg WebDAV endpoint will be used by rclone to mount files</li> <li>Always set the correct <code>api_key</code> to avoid auth issues</li> <li>Avoid using the same port or overlapping directories across instances</li> </ul>"},{"location":"services/dependent/zurg/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Zurg Testing (default repo)</li> <li>Zurg (premium repo)</li> <li>DUMB GitHub Token Setup</li> </ul>"},{"location":"services/dumb/","title":"DUMB Services","text":"<p>DUMB includes two internal services that form the backbone of the entire system:</p> <ul> <li>The DUMB API provides centralized coordination, configuration management, and control over all other services.</li> <li>The DUMB Frontend offers a web-based interface for monitoring, onboarding, logging, and runtime service interaction.</li> </ul> <p>These services are always required and are started automatically when the container launches.</p>"},{"location":"services/dumb/#-what-are-dumb-services","title":"\u2699\ufe0f What Are DUMB Services?","text":"<p>DUMB services are:</p> <ul> <li>Core to the platform infrastructure</li> <li>Always-on - though not recommended, they can be disabled if needed or desired </li> <li>Required for orchestration, onboarding, and log visibility</li> </ul>"},{"location":"services/dumb/#-dumb-service-index","title":"\ud83e\uddf1 DUMB Service Index","text":"Service Description Role DUMB API FastAPI backend for service control, config updates, log streaming, health Orchestration &amp; Coordination DUMB Frontend Web interface for onboarding, log viewing, and service control UI &amp; User Interaction"},{"location":"services/dumb/#-how-they-work","title":"\ud83d\udd17 How They Work","text":"<ul> <li>DUMB API is the internal backend that exposes HTTP endpoints for service management, logs, onboarding, and health monitoring. It must be responsive for any service to be monitored or configured.</li> <li>DUMB Frontend connects to the DUMB API and renders a modern web interface to help users manage their instance through onboarding steps, status dashboards, log viewers, and config editors.</li> </ul> <p>These services talk to each other over localhost and coordinate all other configured components.</p>"},{"location":"services/dumb/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Both services are auto-launched and should not be disabled.</li> <li>If the UI does not load, check the logs for <code>dumb_frontend</code> and <code>dumb_api</code>.</li> <li>Configuration updates and onboarding rely on the DUMB API \u2014 make sure it is reachable and healthy.</li> </ul>"},{"location":"services/dumb/#-related-pages","title":"\ud83d\udcda Related Pages","text":"<ul> <li>API</li> <li>Core Services</li> <li>Dependent Services</li> <li>Optional Services</li> <li>How Services Work Together</li> </ul>"},{"location":"services/dumb/api/","title":"DUMB API","text":"<p>The DUMB API is the central communication layer between the DUMB Frontend and the backend service. It handles requests for logs, service management (start/stop), configuration updates, and health checks.</p>"},{"location":"services/dumb/api/#-configuration-settings-in-dumb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dumb_config.json</code>","text":"<p>Located in <code>dumb.api_service</code>: <pre><code>\"enabled\": true,\n\"process_name\": \"DUMB API\",\n\"log_level\": \"INFO\",\n\"host\": \"127.0.0.1\",\n\"port\": 8000\n</code></pre></p>"},{"location":"services/dumb/api/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code> \u2013 Whether the API service should run.</li> <li><code>process_name</code> \u2013 Used in process management and logs.</li> <li><code>log_level</code> \u2013 Logging verbosity for the API.</li> <li> <p><code>host</code>: IP address for API to listen on.</p> <p><code>0.0.0.0</code> allows access to the API from all addresses</p> </li> <li> <p><code>port</code>: Port exposed for the API.</p> </li> </ul>"},{"location":"services/dumb/dumb-frontend/","title":"DUMB Frontend","text":"<p>The DUMB Frontend is a web-based user interface designed to enhance the management and monitoring of the Debrid Unlimited Media Bridge (DUMB) ecosystem. It offers features such as real-time service logs, filtering options, and service control functionalities, providing users with an intuitive platform to interact with DUMB services.</p>"},{"location":"services/dumb/dumb-frontend/#-configuration-settings-in-dumb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dumb_config.json</code>","text":"<pre><code>\"frontend\": {\n    \"enabled\": true,\n    \"process_name\": \"DUMB Frontend\",\n    \"repo_owner\": \"nicocapalbo\",\n    \"repo_name\": \"dmbdb\",\n    \"release_version_enabled\": false,\n    \"release_version\": \"v1.2.0\",\n    \"branch_enabled\": false,\n    \"branch\": \"main\",\n    \"suppress_logging\": false,\n    \"log_level\": \"INFO\",            \n    \"origins\": [\n        \"http://0.0.0.0:3005\"\n    ],\n    \"host\": \"0.0.0.0\",\n    \"port\": 3005,            \n    \"auto_update\": false,\n    \"auto_update_interval\": 24,\n    \"clear_on_update\": true,\n    \"exclude_dirs\": [],\n    \"platforms\": [\"pnpm\"],\n    \"command\": [\"node\",\".output/server/index.mjs\"],\n    \"config_dir\": \"/dumb/frontend\",\n    \"env\": {}            \n}\n</code></pre>"},{"location":"services/dumb/dumb-frontend/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Determines whether the DUMB Frontend service is active.</li> <li><code>process_name</code>: Name used in logs and process tracking.</li> <li><code>repo_owner</code> / <code>repo_name</code>: Specifies the GitHub repository to clone for the frontend.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Indicates if a specific release version should be used.</li> <li><code>branch_enabled</code> / <code>branch</code>: Specifies the branch to use if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address the frontend should bind to.</li> <li><code>port</code>: Port the frontend is served on.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>platforms</code>: Specifies the runtime environment required (<code>pnpm</code>).</li> <li><code>command</code>: Command to start the frontend service.</li> <li><code>config_dir</code>: Directory where configuration files are stored.</li> <li><code>env</code>: Environment variables for the frontend.</li> </ul>"},{"location":"services/dumb/dumb-frontend/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of the frontend is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/dumb/dumb-frontend/#-accessing-the-dumb-frontend","title":"\ud83d\udeaa Accessing the DUMB Frontend","text":"<ul> <li>Navigate to: <code>http://&lt;host&gt;:&lt;port&gt;</code><ul> <li>default port <code>3005</code></li> </ul> </li> </ul>"},{"location":"services/dumb/dumb-frontend/#-user-interface-overview","title":"\ud83d\udcf8 User Interface Overview","text":""},{"location":"services/dumb/dumb-frontend/#service-dashboard","title":"Service Dashboard","text":"<p>The Service Dashboard displays all active services, showing their status and providing control options.</p>"},{"location":"services/dumb/dumb-frontend/#settings-menu","title":"Settings Menu","text":"<p>The Settings Menu section allows for:</p> <ul> <li>Viewing the current installed version of services</li> <li>Launching the onboarding process to add additional core services </li> <li>Links to each of the service maintainers\u2019 websites</li> <li>Links to DUMB Discord, GitHub, Docs, and DockerHub</li> <li>A list of Contributors for the project  </li> </ul>"},{"location":"services/dumb/dumb-frontend/#toolbar","title":"Toolbar","text":"<p>The Toolbar allows for quick access to service settings and real-time logs, including:</p> <ul> <li>View services that are currently disabled</li> <li>Individual service logs, configuration files, and DUMB config settings</li> </ul>"},{"location":"services/dumb/dumb-frontend/#real-time-logs","title":"Real-Time Logs","text":"<p>The Real-Time Logs section allows for:</p> <ul> <li>Filtering logs by text entry or drop-down menu (log levels and process names).</li> <li>Setting the number of log lines to capture.</li> <li>Downloading captured logs automatically named DMB_logs.txt.</li> <li>Pausing and resuming real-time logs.</li> </ul>"},{"location":"services/dumb/dumb-frontend/#viewing-and-modifying-configurations","title":"Viewing and Modifying Configurations","text":""},{"location":"services/dumb/dumb-frontend/#edit-dumb-config","title":"Edit DUMB Config","text":"<p>For each listed service, users can view and modify the <code>dumb_config.json</code> configuration. Changes can be applied temporarily (saved in memory) or permanently (saved to file).</p>"},{"location":"services/dumb/dumb-frontend/#edit-service-config","title":"Edit Service Config","text":"<p>For services with additional settings, this option allows similar modifications for the service-specific configuration files.</p>"},{"location":"services/dumb/dumb-frontend/#viewing-logs-for-services","title":"Viewing Logs for Services","text":"<p>For services with log files, this view allows:</p> <ul> <li>Viewing the latest logs (since the last service start).</li> <li>Filtering logs (by log levels, log lines).</li> <li>Downloading logs, automatically named based on the service.</li> </ul>"},{"location":"services/dumb/dumb-frontend/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Automatic Updates: Enable <code>auto_update</code> to keep the frontend up-to-date with the latest features.</li> <li>Log Monitoring: Utilize the service logs functionality for effective monitoring and troubleshooting.</li> </ul>"},{"location":"services/dumb/dumb-frontend/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>DUMB Frontend GitHub Repository</li> <li>DUMB Frontend CHANGELOG</li> </ul>"},{"location":"services/optional/","title":"Optional Services","text":"<p>Optional services enhance the DUMB ecosystem by adding scraping capabilities, database tools, or alternate content discovery paths. These are not required by any core service to function but can improve performance, visibility, and control.</p>"},{"location":"services/optional/#-what-are-optional-services","title":"\ud83e\udde9 What Are Optional Services?","text":"<p>Optional services are:</p> <ul> <li>Not essential for startup or core functionality</li> <li>Dynamically linked during runtime if available</li> <li>Frequently used to improve performance, metadata accuracy, or user experience</li> </ul>"},{"location":"services/optional/#-optional-service-index","title":"\ud83e\uddf1 Optional Service Index","text":"Service Description Used By pgAdmin Web-based PostgreSQL administration UI PostgreSQL Riven Frontend Web-based UI for management of the Riven Backend Riven Zilean Debrid scraper and metadata cache for various core services Riven, CLI Debrid, Plex Debrid"},{"location":"services/optional/#-how-they-work","title":"\ud83d\udd17 How They Work","text":"<p>Optional services attach to the DUMB ecosystem dynamically:</p> <ul> <li>pgAdmin provides a GUI for exploring and managing the PostgreSQL instance used by Riven and Zilean.</li> <li>Riven Frontend provides a GUI for exploring and managing content requests that are facilitated by the Riven Backend</li> <li>Zilean improves scraping efficiency by caching previous results from Debrid Media Manager hash lists shared by users and reducing redundant queries. Core services like Riven and CLI Debrid can use it as a scraping backend.</li> </ul> <p>These services can be disabled at any time without affecting the startup of core or dependent services.</p>"},{"location":"services/optional/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>If not using Zilean, make sure other scrapers are configured in Riven and CLI Debrid.</li> <li>pgAdmin is useful during debugging, migrations, or manual SQL work \u2014 but not required for normal operation.</li> <li>You can start optional services manually from the DUMB Frontend or include them in onboarding.</li> </ul>"},{"location":"services/optional/#-related-pages","title":"\ud83d\udcda Related Pages","text":"<ul> <li>Core Services</li> <li>Dependent Services</li> <li>How Services Work Together</li> </ul>"},{"location":"services/optional/pgadmin/","title":"pgAdmin 4","text":"<p>pgAdmin 4 is a web-based administration tool for managing PostgreSQL databases. </p> <p>DUMB includes pgAdmin pre-installed and configured to work out of the box, allowing you to inspect, query, and back up your databases directly from a browser.</p>"},{"location":"services/optional/pgadmin/#-configuration-settings-in-dumb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dumb_config.json</code>","text":"<pre><code>\"pgadmin\": {\n    \"enabled\": true,\n    \"process_name\": \"pgAdmin4\",\n    \"config_dir\": \"/pgadmin/data\",\n    \"config_file\": \"/pgadmin/data/config_local.py\",\n    \"log_file\": \"/pgadmin/data/pgadmin4.log\",\n    \"port\": 5050,\n    \"default_server\": \"0.0.0.0\",\n    \"setup_email\": \"DUMB@DUMB.DUMB\",\n    \"setup_password\": \"postgres\",\n    \"command\": []\n},\n</code></pre>"},{"location":"services/optional/pgadmin/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the pgAdmin service.</li> <li><code>process_name</code>: The label used in logs and process tracking.</li> <li><code>config_dir</code> \u2013 Directory where pgAdmin configuration files are stored.</li> <li><code>config_file</code> \u2013 Path to the primary pgAdmin configuration file.</li> <li><code>port</code>: Port exposed for the pgAdmin.</li> <li> <p><code>default_server</code>: IP address pgAdmin should bind to. </p> <p><code>0.0.0.0</code> allows access to pgAdmin from all addresses</p> </li> <li> <p><code>setup_email</code>: The email address to be used with pgAdmin.</p> </li> <li><code>setup_password</code>: The password to be used with pgAdmin. </li> <li><code>command</code> \u2013 The command used to start pgAdmin.</li> </ul>"},{"location":"services/optional/pgadmin/#-accessing-pgadmin","title":"\ud83d\udeaa Accessing pgAdmin","text":"<ul> <li>Navigate to: <code>http://&lt;host&gt;:&lt;port&gt;</code> <ul> <li>default port <code>5055</code></li> </ul> </li> <li>Login using the credentials set via environment variables:</li> <li><code>PGADMIN_SETUP_EMAIL</code> <ul> <li>default: <code>DUMB@DUMB.DUMB</code></li> </ul> </li> <li><code>PGADMIN_SETUP_PASSWORD</code> <ul> <li>default: <code>postgres</code></li> </ul> </li> </ul> <p>The email is used as the username. It does not need to be a real email address.</p> <p></p>"},{"location":"services/optional/pgadmin/#-server-configuration","title":"\ud83d\udd10 Server Configuration","text":"<ul> <li>pgAdmin is preconfigured with a server connection named DUMB.</li> <li>On first login, you must enter the password for the PostgreSQL server connection.<ul> <li>Default password: <code>postgres</code></li> <li>Or, use the value of <code>POSTGRES_PASSWORD</code> if set in your environment.</li> </ul> </li> </ul>"},{"location":"services/optional/pgadmin/#-extensions","title":"\u2699\ufe0f Extensions","text":"<p>The following PostgreSQL extensions are included in the DUMB image:</p>"},{"location":"services/optional/pgadmin/#-system_stats","title":"\ud83d\udcc8 <code>system_stats</code>","text":"<p>Provides system performance statistics inside PostgreSQL.</p> <ul> <li>Find it in the pgAdmin dashboard under the connected database (e.g., <code>pgadmin</code> or <code>riven</code>).</li> </ul> <p></p>"},{"location":"services/optional/pgadmin/#-pgagent","title":"\ud83d\udcc5 <code>pgAgent</code>","text":"<p>A job scheduler for PostgreSQL. Useful for:</p> <ul> <li>Scheduling backups</li> <li>Routine maintenance</li> </ul> <p></p>"},{"location":"services/optional/pgadmin/#-more-info","title":"\ud83d\udcda More Info","text":"<ul> <li> <p>pgAdmin FAQ</p> </li> <li> <p>pgAdmin Docs</p> </li> <li> <p>pgAgent Job Scheduler</p> </li> </ul>"},{"location":"services/optional/pgadmin/#-summary","title":"\ud83e\udde0 Summary","text":"Setting Value UI Address <code>http://&lt;host&gt;:5050</code> Default Email/Username <code>DUMB@DUMB.DUMB</code> Default Password <code>postgres</code> Data Directory <code>/pgadmin/data</code> Config File <code>/pgadmin/data/config_local.py</code>"},{"location":"services/optional/riven-frontend/","title":"Riven Frontend","text":"<p>The Riven Frontend is the web-based interface for interacting with the Riven Backend. It allows users to manage settings, content, and integrations from a clean and modern UI.</p> <p>DUMB handles automatic installation and updates of the frontend, including versioning and branch targeting. It is served by a lightweight web server and pre-configured to communicate with the backend at startup.</p>"},{"location":"services/optional/riven-frontend/#-configuration-settings-in-dumb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dumb_config.json</code>","text":"<pre><code>\"riven_frontend\": {\n  \"enabled\": false,\n  \"process_name\": \"Riven Frontend\",\n  \"repo_owner\": \"rivenmedia\",\n  \"repo_name\": \"riven-frontend\",\n  \"release_version_enabled\": false,\n  \"release_version\": \"v0.17.0\",\n  \"branch_enabled\": false,\n  \"branch\": \"release-please--branches--main\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"host\": \"127.0.0.1\",\n  \"port\": 3001,\n  \"auto_update\": false,\n  \"auto_update_interval\": 24,\n  \"clear_on_update\": true,\n  \"exclude_dirs\": [],\n  \"platforms\": [\"pnpm\"],\n  \"command\": [\"node\", \"build\"],\n  \"config_dir\": \"/riven/frontend\",\n  \"env\": {\n    \"ORIGIN\": \"http://0.0.0.0:{port}\",\n    \"PORT\": \"{port}\",\n    \"HOST\": \"{host}\"\n  }\n},\n</code></pre>"},{"location":"services/optional/riven-frontend/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the Riven Frontend service.</li> <li><code>process_name</code>: Used in logs and process tracking.</li> <li><code>repo_owner</code> / <code>repo_name</code>: GitHub repo to pull from.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Use a tagged GitHub release if enabled.</li> <li><code>branch_enabled</code> / <code>branch</code>: Pull a specific GitHub branch if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address the frontend should bind to.</li> <li><code>port</code>: Port the frontend is served on.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>platforms</code>: Expected runtime environment (e.g., <code>pnpm</code>).</li> <li><code>command</code>: Command used to build or start the frontend service.</li> <li><code>config_dir</code>: Directory where the frontend files are stored.</li> <li><code>env</code>: Dictionary of environment variables passed to the process (e.g., <code>PORT</code>, <code>ORIGIN</code>, <code>HOST</code>).</li> </ul>"},{"location":"services/optional/riven-frontend/#-origin-variable","title":"\ud83d\udd27 ORIGIN Variable","text":"<p>The <code>ORIGIN</code> environment variable must match the public-facing URL used to access the frontend. This is particularly important when using a reverse proxy like Traefik or Nginx. It ensures correct behavior for authentication, saving settings, and API communication.</p>"},{"location":"services/optional/riven-frontend/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of the frontend is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/optional/riven-frontend/#-access","title":"\ud83c\udf10 Access","text":"<ul> <li>Navigate to: <code>http://&lt;host&gt;:&lt;port&gt;</code> <ul> <li>default port <code>3001</code></li> </ul> </li> </ul> <p>\ud83d\udd10 If using a reverse proxy, ensure the <code>ORIGIN</code> environment variable matches the external URL.</p>"},{"location":"services/optional/riven-frontend/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>The frontend depends on the backend being reachable at <code>http://&lt;host&gt;:&lt;port&gt;</code> defined in the <code>dumb_config.json</code> for the Riven Backend</li> <li>Use Docker port mappings if needed to expose the frontend</li> <li>Check <code>PORT</code> and <code>ORIGIN</code> values if the UI fails to load</li> </ul>"},{"location":"services/optional/riven-frontend/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Riven Frontend GitHub</li> </ul>"},{"location":"services/optional/zilean/","title":"Zilean","text":"<p>Zilean is a service that enables users to search for content sourced by Debrid Media Manager and shared by others. It can be configured as a Torznab indexer in various content applications, allowing seamless integration and content discovery. Additionally, Zilean can scrape data from a running Zurg instance and other Zilean instances. </p>"},{"location":"services/optional/zilean/#-configuration-settings-in-dumb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dumb_config.json</code>","text":"<p>Below is a sample configuration for Zilean within the <code>dumb_config.json</code> file:</p> <pre><code>\"zilean\": {\n  \"enabled\": true,\n  \"process_name\": \"Zilean\",\n  \"repo_owner\": \"iPromKnight\",\n  \"repo_name\": \"zilean\",\n  \"release_version_enabled\": false,\n  \"release_version\": \"v3.3.0\",\n  \"branch_enabled\": false,\n  \"branch\": \"main\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"host\": \"127.0.0.1\",\n  \"port\": 8182,\n  \"auto_update\": false,\n  \"auto_update_interval\": 24,\n  \"clear_on_update\": true,\n  \"exclude_dirs\": [\"/zilean/app/data\"],\n  \"env_copy\": {\n    \"source\": \"/zilean/app/data/.env\",\n    \"destination\": \"/zilean/app/src/.env\"\n  },\n  \"platforms\": [\"python\", \"dotnet\"],\n  \"command\": [\"/zilean/app/zilean-api\"],\n  \"config_dir\": \"/zilean\",\n  \"config_file\": \"/zilean/app/data/settings.json\",\n  \"env\": {\n    \"DOTNET_RUNNING_IN_CONTAINER\": \"true\",\n    \"DOTNET_gcServer\": \"1\",\n    \"DOTNET_GCDynamicAdaptationMode\": \"1\",\n    \"DOTNET_SYSTEM_GLOBALIZATION_INVARIANT\": \"false\",\n    \"PYTHONUNBUFFERED\": \"1\",\n    \"ASPNETCORE_URLS\": \"http://+:{port}\",\n    \"PYTHONPATH\": \"/zilean/venv/lib/python3.11/site-packages\",\n    \"PATH\": \"/zilean/venv/bin:${PATH}\",\n    \"ZILEAN_PYTHON_PYLIB\": \"/usr/local/lib/libpython3.11.so.1.0\",\n    \"Zilean__Database__ConnectionString\": \"Host={postgres_host};Port={postgres_port};Database=zilean;Username={postgres_user};Password={postgres_password};Timeout=300;CommandTimeout=3600;\"\n  }\n},\n</code></pre>"},{"location":"services/optional/zilean/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the Zilean service.</li> <li><code>process_name</code>: Used in logs and process tracking.</li> <li><code>repo_owner</code> / <code>repo_name</code>: GitHub repo to pull from.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Use a tagged release if enabled.</li> <li><code>branch_enabled</code> / <code>branch</code>: Use a specific branch if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address for the Zilean service to bind to.</li> <li><code>port</code>: Port the Zilean API is exposed on.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>env_copy</code>: Paths to copy a <code>.env</code> file from source to destination for runtime support.</li> <li><code>platforms</code>: Required environments\u2014Zilean uses both .NET and Python.</li> <li><code>command</code>: The binary or command used to launch Zilean.</li> <li><code>config_dir</code> / <code>config_file</code>: Where configuration files are stored and loaded.</li> <li><code>env</code>: Dictionary of environment variables passed at runtime, including:</li> <li><code>DOTNET_RUNNING_IN_CONTAINER</code>: Informs .NET that it is containerized.</li> <li><code>DOTNET_gcServer</code>: Enables server-mode garbage collection.</li> <li><code>DOTNET_GCDynamicAdaptationMode</code>: Adjusts GC behavior adaptively.</li> <li><code>DOTNET_SYSTEM_GLOBALIZATION_INVARIANT</code>: Controls globalization features.</li> <li><code>PYTHONUNBUFFERED</code>: Ensures Python output is unbuffered.</li> <li><code>ASPNETCORE_URLS</code>: Specifies ASP.NET Core server bind address.</li> <li><code>PYTHONPATH</code>: Adds Python libraries to runtime path.</li> <li><code>PATH</code>: Prepends Python virtual environment binaries.</li> <li><code>ZILEAN_PYTHON_PYLIB</code>: Full path to the Python shared object.</li> <li><code>Zilean__Database__ConnectionString</code>: Connection string for PostgreSQL.</li> </ul>"},{"location":"services/optional/zilean/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of Zilean is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/optional/zilean/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>The first-time run of Zilean can take a long time; see the Zilean FAQ for more info.</li> <li>Logs from Zilean can be accessed via DUMB\u2019s Frontend or directly from <code>/log/zilean.log</code>.</li> <li>If Zilean fails to bind, check for existing services on port <code>8182</code>.</li> <li>Use the <code>clear_on_update</code> and <code>exclude_dirs</code> settings to preserve persistent data.</li> </ul>"},{"location":"services/optional/zilean/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Zilean GitHub Repository</li> </ul>"}]}